<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2022/07/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="终止进程失效的情况"><a href="#终止进程失效的情况" class="headerlink" title="终止进程失效的情况"></a>终止进程失效的情况</h3><p>cmd杀死进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ taskkill /F /IM node.exe</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据结构算法</title>
    <url>/2022/07/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><ul>
<li><p>数据结构分类</p>
<ul>
<li><p>线性结构：数组、队列、链表、栈                                         </p>
<p>两种存储方式：顺序存储、线性存储</p>
</li>
<li><p>非线性结构：二维数组，广义表、树结构、图结构</p>
</li>
</ul>
</li>
<li><p>算法</p>
<p>目标：速度、占用内存</p>
</li>
<li><p>程序 &#x3D; 数据结构 + 算法</p>
</li>
</ul>
<span id="more"></span>

<h1 id="二、稀疏数组"><a href="#二、稀疏数组" class="headerlink" title="二、稀疏数组"></a>二、稀疏数组</h1><p>就是对二维数组的压缩，第一行记录行列数和值总数，下面记录有意义的值的行列位置和值</p>
 <img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220713003447466.png" alt="image-20220713003447466" style="zoom:50%;" />


<blockquote>
<p>转换思路：<br>   二维数组 转 稀疏数组<br>1.遍历原始二维数组，得到有效数据的个数sum<br>2.创建稀疏数组sparseArr&#x3D;int[sum+1][3]<br>3.将有效数组的有效数据存入到sparseArr</p>
<p>稀疏数组 转 二维数组<br>1.读取稀疏数组第一行，根据第一行创建原始二维数组chessArr2&#x3D;int[6][7]<br>2.读取稀疏数组后面的数据，赋给二维数组</p>
</blockquote>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原始数组</span></span><br><span class="line">        <span class="type">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>][<span class="number">7</span>];</span><br><span class="line">        chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] row : chessArr1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> data : row)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>,data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原始二维数组 转换 稀疏数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line">        <span class="type">int</span> sparseArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArr1[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">        sparseArr1[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">7</span>;</span><br><span class="line">        sparseArr1[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    sparseArr1[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArr1[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArr1[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;sparseArr1.length; i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t%d\t%d\t\n&quot;</span>,sparseArr1[i][<span class="number">0</span>],sparseArr1[i][<span class="number">1</span>],sparseArr1[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//稀疏数组 转换 原始数组</span></span><br><span class="line">        <span class="type">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArr1[<span class="number">0</span>][<span class="number">0</span>]][sparseArr1[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//        sparseArr1[0][0]=0;</span></span><br><span class="line"><span class="comment">//        sparseArr1[0][1]=0;</span></span><br><span class="line"><span class="comment">//        sparseArr1[0][2]=0;</span></span><br><span class="line"><span class="comment">//        for(int[] row : sparseArr1)&#123;</span></span><br><span class="line"><span class="comment">//            chessArr2[row[0]][row[1]] = row[2];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>; i &lt; sparseArr1.length; i++)&#123;</span><br><span class="line">            chessArr2[sparseArr1[i][<span class="number">0</span>]][sparseArr1[i][<span class="number">1</span>]] = sparseArr1[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;恢复的原始数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] row : chessArr2)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> data : row)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>,data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="三、队列"><a href="#三、队列" class="headerlink" title="三、队列"></a>三、队列</h1><p>先入先出原则</p>
<h2 id="3-1-数组模拟队列"><a href="#3-1-数组模拟队列" class="headerlink" title="3.1.数组模拟队列"></a>3.1.数组模拟队列</h2><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220714141500049.png" alt="image-20220714141500049" style="zoom: 80%; float: left" />

<p>思路：</p>
<ul>
<li>队列满  rear &#x3D;&#x3D; maxSize - 1</li>
<li>队列空 front &#x3D;&#x3D; rear</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队列，添加数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;队列满，不能加入&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rear++;</span><br><span class="line">    arr[rear] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队列，获取数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">        <span class="comment">//抛出异常处理</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，没有数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    front++;</span><br><span class="line">    <span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-数组模拟环形队列"><a href="#3-2-数组模拟环形队列" class="headerlink" title="3.2.数组模拟环形队列"></a>3.2.数组模拟环形队列</h2><p> 思路：</p>
<ul>
<li><p>front变量：front指向队列的第一个元素，也就是arr[front]就是队列的第一个元素，front初始值&#x3D;0</p>
</li>
<li><p>rear变量：rear指向队列的最后一个元素的后一个位置，空出一个空间作为约定，rear初始值&#x3D;0</p>
</li>
<li><p>当队列满时，条件是（rear+1）%maxSize &#x3D;&#x3D; front</p>
</li>
<li><p>当队列为空时，条件是 rear&#x3D;&#x3D;front</p>
</li>
<li><p>队列有效数据的个数为（rear+maxSize-front）%maxSize</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队列，添加数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;队列满，不能加入&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[rear] = n;</span><br><span class="line">    rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队列，获取数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">        <span class="comment">//抛出异常处理</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，没有数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[front];</span><br><span class="line">    front = (front + <span class="number">1</span>)  % maxSize;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列所有数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;队列空，没有数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front; i &lt; front + size(); i++) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i % maxSize ,arr[i % maxSize]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、链表"><a href="#四、链表" class="headerlink" title="四、链表"></a>四、链表</h1><p>链表是以节点的方式存储，每个节点包含data域和next域（指向下一个节点），链表的各个节点不一定是连续存放的，链表分带头节点和不带头节点## 4.1.单链表</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220714164004527.png" alt="image-20220714164004527" style="zoom:80%;float:left" />

<p> 在链表末尾插入 思路：</p>
<ul>
<li>先创建一个head头节点，作用就是表示单链表的头</li>
<li>后面每添加一个节点，直接加到链表的最后</li>
<li>遍历：通过辅助遍历</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加节点到单向列表</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode heroNode)</span>&#123;</span><br><span class="line">      <span class="comment">//找到最后节点，将这个节点的next指向新增节点</span></span><br><span class="line">      <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">      <span class="comment">//遍历链表找到最后节点</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">          <span class="comment">//找到链表最后</span></span><br><span class="line">          <span class="keyword">if</span>(temp.next == <span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//如果没找到最后，将temp后移</span></span><br><span class="line">          temp = temp.next;</span><br><span class="line">      &#125;</span><br><span class="line">      temp.next = heroNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//显示链表【遍历】</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(temp == <span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(temp);</span><br><span class="line">          temp = temp.next;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>按顺序插入单链表思路：</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715001644348.png" alt="image-20220715001644348" style="zoom:80%;float:left" />

<ul>
<li>找到新节点插入位置的上一个节点赋给辅助变量temp，找位置通过遍历来搞定</li>
<li>新节点.next &#x3D; temp.next</li>
<li>将temp.next &#x3D; 新的节点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrder</span><span class="params">(HeroNode heroNode)</span>&#123;</span><br><span class="line">        <span class="comment">//头节点不能动，借助辅助指针找添加的位置</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//标志添加的编号是否存在，默认为false</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.next.no &gt; heroNode.no)&#123; <span class="comment">//位置找到，就在temp后面插</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;<span class="comment">//编号存在</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;该编号%d已存在，不能加入\n&quot;</span>,heroNode.no);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//准备插入</span></span><br><span class="line">            heroNode.next = temp.next;</span><br><span class="line">            temp.next = heroNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-双向链表"><a href="#4-2-双向链表" class="headerlink" title="4.2.双向链表"></a>4.2.双向链表</h2><p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715214418710.png" alt="image-20220715214418710" style="zoom:80%;" />## 4.3.环形链表（单向环形链表 ）</p>
<p>约瑟夫问题</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715214752500.png" alt="image-20220715214752500" style="zoom:80%;" />

<p>构建环形链表</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715215540523.png" alt="image-20220715215540523" style="zoom:80%;" />

<p>出队列</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715222257252.png" alt="image-20220715222257252" style="zoom:80%;" />



<h4 id="5-栈（stack）"><a href="#5-栈（stack）" class="headerlink" title="5.栈（stack）"></a>5.栈（stack）</h4><p>出栈pop，入栈push</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716111858662.png" alt="image-20220716111858662" style="zoom:80%;" />

<h5 id="5-1-数组模拟栈"><a href="#5-1-数组模拟栈" class="headerlink" title="5.1.数组模拟栈"></a>5.1.数组模拟栈</h5><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716112400723.png" alt="image-20220716112400723" style="zoom:80%;" />

<p>例子：计算一个表达式</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716144608467.png" alt="image-20220716144608467" style="zoom:80%;" />





<h2 id="5-2-链表模拟栈"><a href="#5-2-链表模拟栈" class="headerlink" title="5.2.链表模拟栈"></a>5.2.链表模拟栈</h2><p>课后练习</p>
<h2 id="5-3-前中后缀表达式"><a href="#5-3-前中后缀表达式" class="headerlink" title="5.3.前中后缀表达式"></a>5.3.前中后缀表达式</h2><ul>
<li>前缀表达式</li>
</ul>
<p>又称波兰表达式，表达式的运算符位于操作数之前</p>
<p>举例：（3+4）* 5 -6    对应  - * + 3 4 5 6</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716212142774.png" alt="image-20220716212142774" style="zoom:80%;" />

<ul>
<li>中缀表达式</li>
</ul>
<p>（3+4）* 5 - 6</p>
<ul>
<li>后缀表达式，适合计算机处理</li>
</ul>
<p>逆波兰表达式， 运算符在操作数之后</p>
<p>如:4 * 5 - 8 + 60 + 8 &#x2F; 2   &#x3D;&gt;  4 5 * 8 - 60 + 8 2 &#x2F; + </p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716212159100.png" alt="image-20220716212159100" style="zoom:80%;" />

<ul>
<li>中缀如何转后缀</li>
</ul>
<p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716221831638.png" alt="image-20220716221831638"></p>
<h1 id="六、递归"><a href="#六、递归" class="headerlink" title="六、递归"></a>六、递归</h1><ul>
<li>递归机制</li>
</ul>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719215930404.png" alt="image-20220719215930404" style="zoom:80%;" />

<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719220735440.png" alt="image-20220719220735440" style="zoom:80%;" />

<p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719221443140.png" alt="image-20220719221443140"></p>
<ul>
<li>迷宫问题</li>
</ul>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719230211249.png" alt="image-20220719230211249" style="zoom:50%;float:left" />

<ul>
<li>八皇后问题</li>
</ul>
<p>思路：</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719231213594.png" alt="image-20220719231213594" style="zoom:80%;" />



<h1 id="七、排序算法"><a href="#七、排序算法" class="headerlink" title="七、排序算法"></a>七、排序算法</h1><p>​     </p>
 <img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220720112052905.png" alt="image-20220720112052905" style="zoom:80%;" />



<h2 id="7-1-冒泡排序"><a href="#7-1-冒泡排序" class="headerlink" title="7.1.冒泡排序"></a>7.1.冒泡排序</h2><p>依次比较相邻两个，比较大小进行交换，先确定最后一个位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> -i; j++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-2选择排序"><a href="#7-2选择排序" class="headerlink" title="7.2选择排序"></a>7.2选择排序</h2><p>确定第1位：找出最小值，和第一位交换；确定第1位，后面找最小放第2位；依次类推。</p>
<p>代码思路：找到本轮最小的下标与第一位交换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span> ; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">            minIndex = j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            minIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i];</span><br><span class="line">    arr[i] = arr[minIndex];</span><br><span class="line">    arr[minIndex] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-插入排序法"><a href="#7-3-插入排序法" class="headerlink" title="7.3.插入排序法"></a>7.3.插入排序法</h2><p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220720204028178.png" alt="image-20220720204028178"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;</span><br><span class="line">        arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">        insertIndex--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-4-希尔排序法"><a href="#7-4-希尔排序法" class="headerlink" title="7.4.希尔排序法"></a>7.4.希尔排序法</h2><p>希尔排序法是对插入法的优化</p>
<p>简单插入排序可能存在，当待插入是最小时，需要移动很多次，影响效率</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//希尔交换式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (gap != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - gap; j &gt;= <span class="number">0</span>; j -= gap) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arr[j] &gt; arr[j + gap]) &#123;</span><br><span class="line">                        temp = arr[j];</span><br><span class="line">                        arr[j] = arr[j + gap];</span><br><span class="line">                        arr[j + gap] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        gap = gap / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//希尔移位式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort2</span><span class="params">(<span class="type">int</span> [] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (gap != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j - gap])&#123;</span><br><span class="line">                        arr[j] = arr[j - gap];</span><br><span class="line">                        j -=  gap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        gap = gap / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-5-快速排序"><a href="#7-5-快速排序" class="headerlink" title="7.5.快速排序"></a>7.5.快速排序</h2><p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220721170339884.png" alt="image-20220721170339884"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;<span class="comment">//左下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> right;<span class="comment">//左下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[(left + right) / <span class="number">2</span>];<span class="comment">//中轴</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[l] &lt; pivot)&#123;</span><br><span class="line">                l += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (arr [r] &gt; pivot)&#123;</span><br><span class="line">                r -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l &gt;= r)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = arr[l];</span><br><span class="line">            arr[l] = arr[r];</span><br><span class="line">            arr[r] = temp;</span><br><span class="line">            <span class="comment">//需要让pivot和剩下的数比</span></span><br><span class="line">            <span class="keyword">if</span>(arr[l] == pivot)&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[r] == pivot)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            l += <span class="number">1</span>;</span><br><span class="line">            r -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; r)&#123;</span><br><span class="line">            quickSort(arr,left,r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; l)&#123;</span><br><span class="line">            quickSort(arr,l,right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-6归并排序"><a href="#7-6归并排序" class="headerlink" title="7.6归并排序"></a>7.6归并排序</h2><p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220725140949110.png" alt="image-20220725140949110"></p>
<h2 id="7-7归并排序"><a href="#7-7归并排序" class="headerlink" title="7.7归并排序"></a>7.7归并排序</h2><h1 id="八、查找算法"><a href="#八、查找算法" class="headerlink" title="八、查找算法"></a>八、查找算法</h1><h2 id="8-1-顺序（线性查找）"><a href="#8-1-顺序（线性查找）" class="headerlink" title="8.1.顺序（线性查找）"></a>8.1.顺序（线性查找）</h2><p>逐一查找</p>
<h2 id="8-2-二分查找"><a href="#8-2-二分查找" class="headerlink" title="8.2.二分查找"></a>8.2.二分查找</h2><h2 id="8-3-插值查找"><a href="#8-3-插值查找" class="headerlink" title="8.3.插值查找"></a>8.3.插值查找</h2><h2 id="8-4-线性查找"><a href="#8-4-线性查找" class="headerlink" title="8.4.线性查找"></a>8.4.线性查找</h2>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>

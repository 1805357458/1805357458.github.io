<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringMVC</title>
    <url>/2022/08/22/Spring%20MVC/</url>
    <content><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h3 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1.基础概念"></a>1.基础概念</h3><ul>
<li><p>服务器三层架构：表现层（Spring MVC）、业务层（Spring）、数据层（Mybatis）</p>
</li>
<li><p>MVC：</p>
<p>model业务模型层  JavaBean</p>
<p>view视图层  JSP</p>
<p>controller控制层  Servlet</p>
</li>
</ul>
<h3 id="2-搭建环境"><a href="#2-搭建环境" class="headerlink" title="2.搭建环境"></a>2.搭建环境</h3><span id="more"></span>
<ul>
<li><p>new model——maven——webapp——快速创建项目：添加键值对（archetypeCatalog，internal）</p>
</li>
<li><p>pom.xml导入依赖</p>
</li>
<li><p>web.xml添加前端控制器和中文乱码过滤器  </p>
</li>
<li><p>main包下创建java包和resources包， 都设置为根目录（右键——mark directory as Sources Root&amp;Resources Root）</p>
</li>
<li><p>resources下创建springmvc.xml，开启注解扫描，视图解析对象，开启注解支持   </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.itcase/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--视图解析器对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringMVC框架注解的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-springmvc-xml"><a href="#3-springmvc-xml" class="headerlink" title="3.springmvc.xml"></a>3.springmvc.xml</h3><ul>
<li>开启注解扫描</li>
<li>配置视图解析器</li>
<li>开启SpringMVC框架注解的支持</li>
</ul>
<h3 id="4-注解"><a href="#4-注解" class="headerlink" title="4.注解"></a>4.注解</h3><ul>
<li><p>@RequestMapping：</p>
<ul>
<li><p>作用：用于建立请求URL和处理请求方法之间的对应关系</p>
</li>
<li><p>用法：</p>
</li>
</ul>
<p>​		controller中：<code>@RequestMapping(path=&quot;/hello&quot;)</code>		jsp中：<code>&lt;a href=&quot;hello&quot;&gt;&lt;/a&gt;</code></p>
<ul>
<li><p>属性：</p>
<p>value：value属性和path属性是一样的 ，常见</p>
<p>method ：指定该方法的请求方式，常见</p>
<p>params：指定限制请求的参数的条件</p>
<p>headers：发送的请求中必须包含的请求头</p>
</li>
</ul>
</li>
<li><p>@RequestParam：</p>
<ul>
<li>作用：前端和方法的参数名字不一样时使用</li>
<li>用法：<code>public String testRequestParam(@RequsetParam(name=&quot;uname&quot;)Sting username)&#123;&#125;</code></li>
</ul>
</li>
<li><p>@RequestBody：</p>
<ul>
<li>作用：获取请求体，直接将表单内容全部获取封装</li>
<li>用法：<code>public String testRequestBody(@RequestBody String body)&#123;&#125;</code></li>
</ul>
</li>
<li><p>@ModelAttribute：</p>
<ul>
<li>作用：放在指定方法前，优先执行改方法</li>
<li>应用场景：当表单提交数据不是完整的实体类时，保证没有提交数据的字段使用数据库原来的数据，而不是为null</li>
<li>用法：单独写一个方法，从数据库查询并封装好，表单数据进行覆盖。</li>
</ul>
</li>
<li><p>@SessionAtrributes：</p>
<ul>
<li><p>作用：各页面数据共享</p>
</li>
<li><p>用法：</p>
<p>类上加注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把msg=美美存入到session域当中</span></span><br><span class="line"><span class="meta">@SessionAttributes(value=&#123;“msg”&#125;)</span></span><br></pre></td></tr></table></figure>

<p>写一个方法重写request：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//msg存到request域当中</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSessionAttributes</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">	model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;美美&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取数据</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getSessionAttributes</span><span class="params">(modelMap modelMap)</span>&#123;</span><br><span class="line">    String msg=(String)modelMap.get(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">delSessionAttributes</span><span class="params">(SessionStatus status)</span>&#123;</span><br><span class="line">    status.setComplete();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-请求参数的绑定"><a href="#5-请求参数的绑定" class="headerlink" title="5.请求参数的绑定"></a>5.请求参数的绑定</h3><ul>
<li><p>入门例子：</p>
<ul>
<li><p>jsp中：<code>&lt;a href=&quot;param/testParam?username=fsq&amp;password=123&quot;&gt;请求参数绑定&lt;a&gt;</code></p>
</li>
<li><p>ParamController中：<code>public String testParam(String username,String password)&#123;&#125;</code></p>
</li>
</ul>
</li>
<li><p>绑定实体类型：</p>
<ul>
<li>jsp中：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;param/saveAccount&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ParamController中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/savaAccount&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">savaAccount</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-响应数据和结果视图"><a href="#6-响应数据和结果视图" class="headerlink" title="6.响应数据和结果视图"></a>6.响应数据和结果视图</h3><ul>
<li><p>返回String类型</p>
<p><code>return &quot;success&quot;</code>视图解析器自动跳转success.jsp</p>
<p>controller中存数据：<code>model.addAtrribute(&quot;user&quot;,user);</code></p>
<p>jsp中取数据：  <code>$&#123;user.username&#125; $&#123;user.password  &#125;</code></p>
</li>
<li><p>返回ModelAndView</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">	<span class="comment">//从数据库中查user对象省略</span></span><br><span class="line">	mv.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">	mv.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态资源过滤，不被前端控制器拦截 </p>
<p>静态资源放在webapp目录下</p>
<p>springmvc.xml中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>知识点：json、ajax </p>
</li>
<li><p>文件上传</p>
<ul>
<li>传统方式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">fileupload</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">	<span class="comment">//先获取到要上传的文件目录</span></span><br><span class="line">	String path=request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">	<span class="comment">//创建file对象，一会向该路径下上传文件</span></span><br><span class="line">	File file=<span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">	<span class="comment">//判断路径是否存在，如果不存在，则创建路径</span></span><br><span class="line">	<span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">		file.mkdirs();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建磁盘文件项工厂</span></span><br><span class="line">	DisFileItemFactory factory=<span class="keyword">new</span> <span class="title class_">DisFileIremFactory</span>();</span><br><span class="line">	ServletFileUpload upload=<span class="keyword">new</span> <span class="title class_">ServletFiUpload</span>(factory);</span><br><span class="line">	<span class="comment">//解析request对象</span></span><br><span class="line">	List&lt;FileItem&gt; items=upload.parseRequest(request);</span><br><span class="line">	<span class="comment">//遍历 </span></span><br><span class="line">	<span class="keyword">for</span>(FileItem item:items)&#123;</span><br><span class="line">		<span class="comment">//进行判断，当前item对象是否是上传文件项</span></span><br><span class="line">		<span class="keyword">if</span>(item.isFormField())&#123;</span><br><span class="line">		</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			String filename=item.getName();</span><br><span class="line">            <span class="comment">//把文件的名称设置唯一值uuid</span></span><br><span class="line">            String uuid=UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            filename=uuid+<span class="string">&quot;_&quot;</span>+filename</span><br><span class="line">			<span class="comment">//完成文件上传</span></span><br><span class="line">			item.write(<span class="keyword">new</span> <span class="title class_">File</span>(p ath,filename));</span><br><span class="line">			<span class="comment">//删除临时文件</span></span><br><span class="line">			item.delete();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>springmvc方式：</p>
<p>springmvc.xml配置文件解析器对象：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">fileupload</span><span class="params">(HttpServletRequest request,MultipartFile upload)</span>&#123;</span><br><span class="line">	<span class="comment">//先获取到要上传的文件目录</span></span><br><span class="line">	String path=request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">	<span class="comment">//创建file对象，一会向该路径下上传文件</span></span><br><span class="line">	File file=<span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">	<span class="comment">//判断路径是否存在，如果不存在，则创建路径</span></span><br><span class="line">	<span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">		file.mkdirs();</span><br><span class="line">	&#125;</span><br><span class="line">	String filename=upload.getOriginalFilename();</span><br><span class="line">    <span class="comment">//把文件的名称设置唯一值uuid</span></span><br><span class="line">        String uuid=UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        filename=uuid+<span class="string">&quot;_&quot;</span>+filename</span><br><span class="line">		<span class="comment">//完成文件上传</span></span><br><span class="line">		upload.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path,filename));</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>跨服务器文件上传</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">fileupload</span><span class="params">(HttpServletRequest request,MultipartFile upload)</span>&#123;</span><br><span class="line">	<span class="comment">//跨服务器上传</span></span><br><span class="line">	String path=<span class="string">&quot;http://localhost:9090/uploads/&quot;</span>;</span><br><span class="line">	String filename=upload.getOriginalFilename();</span><br><span class="line">    <span class="comment">//把文件的名称设置唯一值uuid</span></span><br><span class="line">        String uuid=UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        filename=uuid+<span class="string">&quot;_&quot;</span>+filename</span><br><span class="line">		<span class="comment">//创建客户端对象</span></span><br><span class="line">		<span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> Client.create();</span><br><span class="line">		<span class="comment">//和图片服务器进行连接</span></span><br><span class="line">		<span class="type">WebResource</span> <span class="variable">webResource</span> <span class="operator">=</span> client.resource(path+filename);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="7-SpringMVC拦截器"><a href="#7-SpringMVC拦截器" class="headerlink" title="7.SpringMVC拦截器"></a>7.SpringMVC拦截器</h3><p>​    过滤器：是servlet规范的一部分，任何java web都可以使用，可以拦截所有要访问的资源。</p>
<p>​	拦截器：是SpringMVC框架自己的，只会拦截访问的控制器方法，不拦截jsp,html,css,image和js。</p>
<ul>
<li><p>自定义拦截器</p>
<ul>
<li><p>创建一个类继承HandleInterceptor接口</p>
<p>拦截器的方法有：</p>
<ul>
<li>preHandle：在controller之前执行，return ture&#x2F;false（放行&#x2F;不放行）</li>
<li>postHandle：在controller之后，jsp之前执行</li>
<li>afterCompletion：在jsp之后执行。释放资源。</li>
</ul>
</li>
<li><p>springmvc.xml中配置拦截器：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--要拦截的具体方法--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/*&quot;</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.controller.cn.itcast.interceptor.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-SSM整合"><a href="#8-SSM整合" class="headerlink" title="8.SSM整合"></a>8.SSM整合</h3><p>​	Spring（业务层）+SpringMVC（表现层）+Mybatis（持久层）</p>
<ul>
<li><p>环境搭建：</p>
<ul>
<li>pom.xml导入依赖坐标</li>
<li>创建各包：controller、dao、domain、service</li>
<li>编写接口和实现类代码</li>
</ul>
</li>
<li><p>Spring配置搭建  ：</p>
<p>将service和dao都交给IOC容器管理，可以使用注解</p>
<ul>
<li><p>创建spring的xml文件：</p>
<ul>
<li><p>开启注解扫描，除了controller</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.itcast&quot;</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在ServiceImpl的类上加注解@Service(“ “)</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>用Spring整合SpringMVC：</p>
<p>jsp和controller关联，controller和service关联</p>
<ul>
<li><p>web.xml</p>
<ul>
<li>配置前端控制器</li>
<li>中文乱码过滤器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--中文乱码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFileter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFileter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建springmvc.xml文件</p>
<ul>
<li>开启注解扫描，只扫描controller注解</li>
<li>配置视图解析器</li>
<li>过滤静态资源</li>
<li>开启springmvc注解的支持</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.itcase/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--视图解析器对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--过滤静态资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringMVC框架注解的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>web.xml配置监听器</p>
<p>将spring的配置文件加载到容器中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置配置文件的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在controller中获取service对象，并加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountService accountService;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在serviceImpl中获取dao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Spring整合Mybatis</p>
<p>数据库和dao连接</p>
<ul>
<li><p>在spring的配置文件中注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSouce&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///ssm&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">dataSource/</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AccountDao接口所在包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bassePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.itcast.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>dao接口中的方法上加注解</p>
<p><code>@Select(&quot;select * from account&quot;)</code></p>
<p><code>@Insert(&quot;insert into account (name,money) vlaues (#&#123;name&#125;,#&#123;money&#125;)&quot;)</code></p>
</li>
<li><p>dao接口的类上加注解<code>@Repository</code></p>
</li>
<li><p>在spring配置文件中配置Spring框架声明式事物管理</p>
<p>对service进行事物管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事物管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事物通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* cn.itcast.service.impl.*.ServiceImpl.*(..)) &quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>SSM整体逻辑</p>
<p>jsp点击链接—请求controller ——调用service——调用dao——controller执行完毕返回——跳转jsp</p>
</li>
</ul>
<h3 id="9-html标签"><a href="#9-html标签" class="headerlink" title="9.html标签"></a>9.html标签</h3><ul>
<li><p>遍历list</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">    	$&#123;account.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2022/08/22/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>​	提供快速使用Spring的方式，基于约定优于配置的思想。SpringBoot并不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式。spring.io—spring的官方网站。设计初衷是让你快速启动项目。</p>
<p>​	Spring的缺点：配置繁琐、依赖繁琐</p>
<p>​	SpringBoot功能：自动配置、起步依赖、辅助功能</p>
<span id="more"></span>

<h3 id="2-入门工程搭建步骤"><a href="#2-入门工程搭建步骤" class="headerlink" title="2.入门工程搭建步骤"></a>2.入门工程搭建步骤</h3><ul>
<li><p>创建Maven项目</p>
</li>
<li><p>导入起步依赖 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Boot工程需要继承的父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sprin  g-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Import dependency management from Spring Boot --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- web开发的起步依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependen cies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义Controller，同SpringMVC一样</p>
<ul>
<li><p>@RestController和@Controller的区别：</p>
<p>@RestController无法返回指定页面，而@Controller可以。. 解析：对于Controller， 如果只是使用@RestController注解，则其方法无法返回指定页面，此时配置的视图解析器 InternalResourceViewResolver不起作用，返回的内容就是 return 里的内容。. 如果需要返回到指定页面，则需要用 @Controller配合视图解析器InternalResourceViewResolver才行。</p>
<p>@RestController&#x3D;@Controller+@ResponseBody</p>
</li>
</ul>
</li>
<li><p>编写引导类    </p>
<p>文件名：*Application.java </p>
<p>作用：Spring Boot项目的入口，运行main方法就可以启动项目</p>
</li>
<li><p>启动测试</p>
</li>
</ul>
<h3 id="3-idea快速构建工程"><a href="#3-idea快速构建工程" class="headerlink" title="3.idea快速构建工程"></a>3.idea快速构建工程</h3><ul>
<li>选择Spring Initializr—需要网络<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220427153114830.png" alt="image-20220427153114830"></li>
<li>填写信息<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220427153635510.png" alt="image-20220427153635510"></li>
<li>勾选所需要的依赖<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220427153815036.png" alt="image-20220427153815036"></li>
</ul>
<h3 id="4-起步依赖原理分析"><a href="#4-起步依赖原理分析" class="headerlink" title="4.起步依赖原理分析"></a>4.起步依赖原理分析</h3><ul>
<li>在spring-boot-starter-parent中定义了各种技术的版本信息，组合了一套最优搭配的技术版本。 </li>
<li>在各种starter中，定义了完成该功能需要的坐标合集，其中大部分版本信息来自于父工程。</li>
<li>我们的工程继承parent，引入start后，通过依赖传递，就可以简单方便获得需要的jar包，并且不会存在版本冲突的问题。</li>
</ul>
<h3 id="5-配置文件"><a href="#5-配置文件" class="headerlink" title="5.配置文件"></a>5.配置文件</h3><h4 id="5-1-分类"><a href="#5-1-分类" class="headerlink" title="5.1.分类"></a>5.1.分类</h4><p>​		两种类型：properties和yml&#x2F;yaml</p>
<p>​		文件名称：application</p>
<p>​		优先级：properties&gt;yml&gt;yaml</p>
<h4 id="5-2-YAML配置文件"><a href="#5-2-YAML配置文件" class="headerlink" title="5.2.YAML配置文件"></a>5.2.YAML配置文件</h4><ul>
<li><p>介绍：</p>
<p>是一种直观的 能够被电脑识别的数据序列化格式，是以数据为核心的，比传统xml更简洁。  </p>
<p>文件扩展名yml或yaml</p>
</li>
<li><p>区别</p>
<ul>
<li><p>properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.adress</span>=<span class="string">127.0.0.1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">	<span class="attr">adress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>语法</p>
<p>大小写敏感；数据值前必须有分割；使用缩进表示层级；缩进不允许tab只允许使用空格，空格数目不重要，只要相同层级的元素左对齐即可；#表示注释</p>
</li>
<li><p>数据格式</p>
<ul>
<li><p>对象（map）：键值对的集合</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">person2:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组：一组按次序排列的值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">adress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">adress2:</span> [<span class="string">beijing</span>,<span class="string">shanghai</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>纯量：单个的、不可分割的值（常量）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">msg1:</span> <span class="string">&#x27;hello \n world&#x27;</span> <span class="comment">#单引号忽略转义字符</span></span><br><span class="line"><span class="attr">msg2:</span> <span class="string">&quot;hello \n world&quot;</span> <span class="comment">#双引号识别转义字符</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参数应用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">$&#123;name&#125;</span> <span class="comment">#引用上边定义的name值 </span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="5-3-读取配置文件内容"><a href="#5-3-读取配置文件内容" class="headerlink" title="5.3.读取配置文件内容"></a>5.3.读取配置文件内容</h4><ul>
<li><p>@value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;address[0]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;msg1&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String msg1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Environment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;<span class="comment">//选择的是org.springframework.core.env.Environment</span></span><br><span class="line"><span class="comment">//方法内取值输出</span></span><br><span class="line">System.out.println(env.getProperty(<span class="string">&quot;person.name&quot;</span>));</span><br><span class="line">System.out.println(env.getProperty(<span class="string">&quot;address[1]&quot;</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>@ConfigurationProperties</p>
</li>
<li><p>编写实体类</p>
<p>加@Component注解将实体类交给spring管理</p>
<p>加@ConfigurationProperties注解设置前缀获取yaml文件的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="line">public class Person &#123;</span><br><span class="line">	private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String[] address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>yaml配置文件中设置值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">address:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">shanghai</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>controller中注入实体类，并取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"><span class="comment">//方法中取值</span></span><br><span class="line">System.out.println(person);</span><br><span class="line">String[] address = person.getAddress();</span><br><span class="line"><span class="keyword">for</span> (String s : address) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实体类上方爆红解决—导入configuration依赖</p>
<p>点击打开文件后跳转官网导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实际开发时顺序</p>
<p>先定义好实体类，再导入依赖，最后写yaml配置文件</p>
</li>
</ul>
<h4 id="5-4-profile"><a href="#5-4-profile" class="headerlink" title="5.4.profile"></a>5.4.profile</h4><ul>
<li><p>功能：动态配置切换</p>
</li>
<li><p>配置方式：</p>
<ul>
<li><p>多文件配置</p>
<ul>
<li><p>创建3个配置文件，格式为application-*.properties</p>
<p>application-dev.properties(开发环境)</p>
<p>application-test.properties(测试环境)</p>
<p>application-pro.properties(生产环境)</p>
</li>
<li><p>在application.properties激活3个配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment">#spring.profiles.active=test</span></span><br><span class="line"><span class="comment">#spring.profiles.active=pro</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Yaml配置方式</p>
<ul>
<li><p>创建application.yaml单个文档统一配置</p>
</li>
<li><p>springboot2.4版本以下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#---表示分隔符</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>springboot2.4版本以上</p>
<p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p>application-dev.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>激活方式</p>
<ul>
<li><p>修改上述配置文件</p>
</li>
<li><p>设置虚拟机参数</p>
<p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220428094403642.png" alt="image-20220428094403642"></p>
</li>
<li><p>命令行参数</p>
<p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220428094929379.png" alt="image-20220428094929379"></p>
</li>
</ul>
</li>
</ul>
<h4 id="5-5-内部配置加载顺序"><a href="#5-5-内部配置加载顺序" class="headerlink" title="5.5.内部配置加载顺序"></a>5.5.内部配置加载顺序</h4><p>​	 Springboot程序启动时，会从以下位置加载配置文件，同时也是优先级：</p>
<ul>
<li>file:.&#x2F;config&#x2F;：当前项目下的&#x2F;config目录下</li>
<li>file:.&#x2F;            ：当前项目的根目录</li>
<li>classpath:&#x2F;config：classpath的&#x2F;config目录（resources&#x2F;config）</li>
<li>classpath:&#x2F;           ：classpath的根目录（resources&#x2F;）</li>
</ul>
<h4 id="5-6-外部配置加载顺序"><a href="#5-6-外部配置加载顺序" class="headerlink" title="5.6.外部配置加载顺序"></a>5.6.外部配置加载顺序</h4><p>略—<a href="https://www.bilibili.com/video/BV1Lq4y1J77x?p=17&spm_id_from=pageDriver">黑马程序员SpringBoot教程，6小时快速入门Java微服务架构Spring Boot_哔哩哔哩_bilibili</a></p>
<h3 id="6-SpringBoot整合框架"><a href="#6-SpringBoot整合框架" class="headerlink" title="6.SpringBoot整合框架"></a>6.SpringBoot整合框架</h3><h4 id="6-1整合Junit"><a href="#6-1整合Junit" class="headerlink" title="6.1整合Junit"></a>6.1整合Junit</h4><ul>
<li><p>引入starter-test起步依赖，一般已经引好了</p>
</li>
<li><p>编写测试类（*ServiceTest.java），写在test包下</p>
</li>
<li><p>编写测试方法（测试Service），加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RunWith(SpringRunner.class) </span></span><br><span class="line"><span class="meta">@SpringBootTest</span><span class="comment">//(classes = SpringbootTestApplication.class)</span></span><br><span class="line"><span class="comment">//springboot2.2后不需要@RunWith，因为新版springboot测试包目录结构和名字和main一样，所有也不需要指定classes</span></span><br><span class="line"><span class="keyword">public</span> class *ServiceTest&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userservice;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-2整合Redis"><a href="#6-2整合Redis" class="headerlink" title="6.2整合Redis"></a>6.2整合Redis</h4><p>略—<a href="https://www.bilibili.com/video/BV1Lq4y1J77x?p=17&spm_id_from=pageDriver">黑马程序员SpringBoot教程，6小时快速入门Java微服务架构Spring Boot_哔哩哔哩_bilibili</a></p>
<h4 id="6-3整合MyBatis"><a href="#6-3整合MyBatis" class="headerlink" title="6.3整合MyBatis"></a>6.3整合MyBatis</h4><ul>
<li><p>构建项目时选择SQL—MySQL Driver&amp;MyBatis Framework</p>
</li>
<li><p>引入mybatis起步依赖，添加mysql驱动</p>
</li>
<li><p>编写DataSource和Mybatis相关配置</p>
<p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">dataspurce:</span> </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///springboot</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义表和实体类</p>
</li>
<li><p>编写dao纯注解开发</p>
<p>注解开发 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">//查询所有用户</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ul>
<h4 id="6-4整合MyBatis-Plus"><a href="#6-4整合MyBatis-Plus" class="headerlink" title="6.4整合MyBatis-Plus"></a>6.4整合MyBatis-Plus</h4><ul>
<li><p>导入依赖</p>
<p>进入官网(<a href="https://mvnrepository.com/)%E2%80%94%E6%90%9C%E7%B4%A2mybatis">https://mvnrepository.com/)—搜索mybatis</a> plus—选择版本复制坐标</p>
</li>
</ul>
<h4 id="6-5-SSMP整合案例"><a href="#6-5-SSMP整合案例" class="headerlink" title="6.5 SSMP整合案例"></a>6.5 SSMP整合案例</h4><ul>
<li><p>项目位置</p>
</li>
<li><p>开发方案</p>
<ul>
<li>实体类开发—使用Lombok快速制作实体类</li>
<li>Dao开发—整合MyBatisPlus，制作数据层测试类</li>
<li>Service开发—基于MyBatisPlus进行增量开发，制作业务层测试类</li>
<li>Controller开发—基于Restful开发，使用PostMan测试接口功能</li>
<li>Controller开发—前后端开发协议制作</li>
<li>页面开发—基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理<ul>
<li>列表、新增、修改、删除、分页、查询</li>
</ul>
</li>
<li>项目异常处理</li>
<li>按条件查 询—页面功能调整、Controller修正功能、Service修正功能</li>
</ul>
</li>
<li><p>步骤：</p>
<ul>
<li><p>创建项目</p>
<ul>
<li>勾选Springweb和Mysql Driver</li>
<li>修改java版本</li>
<li>pom.xml修改mysql版本，引入mp坐标、druid坐标、lombok坐标</li>
<li>修改配置文件为yaml格式，设置端口为80</li>
</ul>
</li>
<li><p>创建实体类，使用lombok</p>
<ul>
<li>@Data</li>
<li>下载lombok插件：设置中—plugins—搜索并下载（如果搜不到，更改设置中Appearance—System Setting—HTTP proxy—选择auto detect）</li>
</ul>
</li>
<li><p>数据层开发，使用mp和druid坐标</p>
<ul>
<li><p>配置application.yaml连接数据库</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc://mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line"><span class="comment">#设置表前缀，自增策略</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure>
</li>
<li><p>创建dao接口，@mapper注解；接口继承BaseMapper<T>指定泛型T（BookDao extends BaseMapper<Book>）</p>
</li>
<li><p>注意：如果表中id是自增的，使用插入方法需要在yaml中配置自增策略，如上</p>
</li>
<li><p>为方便调试，可以开启MyBatisPlus的日志为标准输出</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用分页要配置拦截器</p>
<p>创建config包，建MPConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 分页操作需要设定分页对象IPage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按条件查询</p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetBy2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Spring&quot;</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lqw.like(name!=<span class="literal">null</span>,Book::getName,name);</span><br><span class="line">    bookDao.selectList(lqw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务层开发</p>
<ul>
<li><p>定义接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现类</p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IBookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao,Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以在基础上做功能追加，重载时不要覆盖原始方法</li>
</ul>
</li>
<li><p>表现层开发</p>
<ul>
<li><p>基于Restful进行接口开发，使用Postman测试表现层接口功能</p>
</li>
<li><p>restful表现层接口：新增post，删除delete，修改@put，查询get</p>
</li>
<li><p>接受参数：实体数据@RequestBody，路径变量@PathVariable</p>
</li>
<li><p>设置统一的数据格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag,Object data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BookController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(bookService.save(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(bookService.updateById(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(bookService.removeById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>,bookService.getById(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>前端thymeleaf</p>
<ul>
<li><p>项目中引入坐标， 修改配置文件</p>
</li>
<li><p>html中引入thymeleaf，动态引擎</p>
<p><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda</title>
    <url>/2022/08/22/Lambda/</url>
    <content><![CDATA[<p>课程：<a href="https://www.bilibili.com/video/BV164411E7Ny?p=5&spm_id_from=pageDriver&vd_source=be9f8d3c1e050828cdd613cd96a24bff">05_好程序员_lambda表达式_lambda方法引用_哔哩哔哩_bilibili</a></p>
<h2 id="一、Lambda表达式简介"><a href="#一、Lambda表达式简介" class="headerlink" title="一、Lambda表达式简介"></a>一、Lambda表达式简介</h2><h3 id="什么是Lambda？"><a href="#什么是Lambda？" class="headerlink" title="什么是Lambda？"></a>什么是Lambda？</h3><p>Lambda是JAVA 8添加的新特性，说白了，Lambda是一个匿名函数</p>
<h3 id="为什么使用Lambda"><a href="#为什么使用Lambda" class="headerlink" title="为什么使用Lambda"></a>为什么使用Lambda</h3><p>使用Lambda表达式可以对一个接口的方法进行非常简洁的实现</p>
<h3 id="Lambda对接口的要求"><a href="#Lambda对接口的要求" class="headerlink" title="Lambda对接口的要求"></a>Lambda对接口的要求</h3><span id="more"></span>
<p>虽然可以使用Lambda表达式对某些接口进行简单的实现，但是并不是所有的接口都可以用Lambda表达式来实现，要求接口中定义的<strong>必须要实现的抽象方法只能是一个</strong></p>
<blockquote>
<p>在JAVA8中 ，对接口加了一个新特性：default</p>
<p>可以使用default对接口方法进行修饰，被修饰的方法在接口中可以默认实现</p>
</blockquote>
<h3 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h3><p>修饰函数式接口的，接口中的抽象方法只有一个</p>
<h2 id="二、Lambda的基础语法"><a href="#二、Lambda的基础语法" class="headerlink" title="二、Lambda的基础语法"></a>二、Lambda的基础语法</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Lambda是一个匿名函数 一般关注的是以下两个重点</span></span><br><span class="line"><span class="comment">// 参数列表 方法体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ()：用来描述参数列表</span></span><br><span class="line"><span class="comment">*  &#123;&#125;：用来描述方法体 有时可以省略</span></span><br><span class="line"><span class="comment">*  -&gt;: Lambda运算符 读作goes to</span></span><br><span class="line"><span class="comment">*  例 Test t=()-&gt;&#123;System.out.println(&quot;hello word&quot;)&#125;; 大括号可省略</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="2-创建多个接口"><a href="#2-创建多个接口" class="headerlink" title="2.创建多个接口"></a>2.创建多个接口</h3><p>按照有无返回值、单个参数、多个参数的情况分如下几类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无返回值 无参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaNoneReturnNoneParmeter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无返回值 1个参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaNoneReturnSingleParmeter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无返回值 n个参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaNoneReturnMutipleParmeter</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值 无参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaSingleReturnNoneParmeter</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值 1个参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaSingleReturnSingleParmeter</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值 n个参数</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LambdaSingleReturnMutipleParmeter</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-创建测试类"><a href="#3-创建测试类" class="headerlink" title="3.创建测试类"></a>3.创建测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alan.learn.syntax;</span><br><span class="line"><span class="keyword">import</span> com.alan.learn.interfaces.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Syntax1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.Lambda表达式的基础语法</span></span><br><span class="line">        <span class="comment">// Lambda是一个匿名函数 一般关注的是以下两个重点</span></span><br><span class="line">        <span class="comment">// 参数列表 方法体</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * （）：用来描述参数列表</span></span><br><span class="line"><span class="comment">         *  &#123;&#125;：用来描述方法体</span></span><br><span class="line"><span class="comment">         *  -&gt;: Lambda运算符 读作goes to</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无参无返回  </span></span><br><span class="line">        LambdaNoneReturnNoneParmeter lambda1=()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello word&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        lambda1.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无返回值 单个参数 </span></span><br><span class="line">        LambdaNoneReturnSingleParmeter lambda2=(<span class="type">int</span> n)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数是：&quot;</span>+n);</span><br><span class="line">        &#125;;</span><br><span class="line">        lambda2.test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无返回值 多个参数</span></span><br><span class="line">        LambdaNoneReturnMutipleParmeter lambda3=(<span class="type">int</span> a,<span class="type">int</span> b)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数和是：&quot;</span>+(a+b));</span><br><span class="line">        &#125;;</span><br><span class="line">        lambda3.test(<span class="number">10</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有返回值 无参数</span></span><br><span class="line">        LambdaSingleReturnNoneParmeter lambda4=()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;lambda4：&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> ret=lambda4.test();</span><br><span class="line">        System.out.println(<span class="string">&quot;返回值是：&quot;</span>+ret);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有返回值 单个参数</span></span><br><span class="line">        LambdaSingleReturnSingleParmeter lambda5=(<span class="type">int</span> a)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> a*<span class="number">2</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> ret2= lambda5.test(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;单个参数，lambda5返回值是:&quot;</span>+ret2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有返回值 多个参数</span></span><br><span class="line">        LambdaSingleReturnMutipleParmeter lambda6=(<span class="type">int</span> a,<span class="type">int</span> b)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> ret3=lambda6.test(<span class="number">12</span>,<span class="number">14</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;多个参数，lambda6返回值是：&quot;</span>+ret3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">    hello word</span><br><span class="line">	参数是：<span class="number">10</span></span><br><span class="line">	参数和是：<span class="number">22</span></span><br><span class="line">	lambda4：</span><br><span class="line">	返回值是：<span class="number">100</span></span><br><span class="line">	单个参数，lambda5返回值是:<span class="number">6</span></span><br><span class="line">    多个参数，lambda6返回值是：<span class="number">26</span></span><br></pre></td></tr></table></figure>



<h2 id="三、语法精简"><a href="#三、语法精简" class="headerlink" title="三、语法精简*"></a>三、语法精简*</h2><p>针对上述基础语法的精简</p>
<h3 id="1-参数类型精简"><a href="#1-参数类型精简" class="headerlink" title="1.参数类型精简"></a>1.参数类型精简</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 语法精简</span></span><br><span class="line"><span class="comment">* 1.参数类型</span></span><br><span class="line"><span class="comment">* 由于在接口的抽象方法中，已经定义了参数的数量类型 所以在Lambda表达式中参数的类型可以省略</span></span><br><span class="line"><span class="comment">* 备注：如果需要省略类型，则每一个参数的类型都要省略，千万不要一个省略一个不省略</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">LambdaNoneReturnMutipleParmeter lambda1=(<span class="type">int</span> a,<span class="type">int</span> b)-&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>); </span><br><span class="line">&#125;;    </span><br><span class="line">可以精简为:</span><br><span class="line">LambdaNoneReturnMutipleParmeter lambda1=(a,b)-&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-参数小括号精简"><a href="#2-参数小括号精简" class="headerlink" title="2.参数小括号精简"></a>2.参数小括号精简</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 2.参数小括号</span></span><br><span class="line"><span class="comment">* 如果参数列表中，参数的数量只有一个 此时小括号可以省略</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">LambdaNoneReturnSingleParmeter lambda2=(a)-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">可以精简为:</span><br><span class="line">LambdaNoneReturnSingleParmeter lambda2= a-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-方法大括号精简"><a href="#3-方法大括号精简" class="headerlink" title="3.方法大括号精简"></a>3.方法大括号精简</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 3.方法大括号</span></span><br><span class="line"><span class="comment">* 如果方法体中只有一条语句，此时大括号可以省略</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">LambdaNoneReturnSingleParmeter lambda3=a-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">可以精简为:</span><br><span class="line">LambdaNoneReturnSingleParmeter lambda3=a-&gt;System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-大括号精简补充"><a href="#4-大括号精简补充" class="headerlink" title="4.大括号精简补充"></a>4.大括号精简补充</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 4.如果方法体中唯一的一条语句是一个返回语句</span></span><br><span class="line"><span class="comment">* 贼省略大括号的同时 也必须省略return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">LambdaSingleReturnNoneParmeter lambda4=()-&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line">可以精简为:</span><br><span class="line">LambdaSingleReturnNoneParmeter lambda4=()-&gt;<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-多参数，有返回值-精简"><a href="#5-多参数，有返回值-精简" class="headerlink" title="5.多参数，有返回值 精简"></a>5.多参数，有返回值 精简</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaSingleReturnNoneParmeter lambda4=(a,b)-&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;;</span><br><span class="line">可以精简为:</span><br><span class="line">LambdaSingleReturnMutipleParmeter lambda5=(a,b)-&gt;a+b;</span><br></pre></td></tr></table></figure>



<h2 id="四、Lambda语法进阶"><a href="#四、Lambda语法进阶" class="headerlink" title="四、Lambda语法进阶"></a>四、Lambda语法进阶</h2><h3 id="1-方法引用-普通方法与静态方法"><a href="#1-方法引用-普通方法与静态方法" class="headerlink" title="1.方法引用(普通方法与静态方法)"></a>1.方法引用(普通方法与静态方法)</h3><p>在实际应用过程中，一个接口在很多地方都会调用同一个实现，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaSingleReturnMutipleParmeter lambda1=(a,b)-&gt;a+b;</span><br><span class="line">LambdaSingleReturnMutipleParmeter lambda2=(a,b)-&gt;a+b;</span><br></pre></td></tr></table></figure>

<p>这样一来每次都要写上具体的实现方法 a+b，如果需求变更，则每一处实现都需要更改，基于这种情况，可以将后续的是实现更改为已定义的方法，需要时直接调用就行</p>
<h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*方法引用：</span></span><br><span class="line"><span class="comment">* 可以快速的将一个Lambda表达式的实现指向一个已经实现的方法</span></span><br><span class="line"><span class="comment">* 方法的隶属者 如果是静态方法 隶属者就是一个类  非静态的是一个对象</span></span><br><span class="line"><span class="comment">* 语法：方法的隶属者::方法名</span></span><br><span class="line"><span class="comment">* 注意：</span></span><br><span class="line"><span class="comment">*  1.引用的方法中，参数数量和类型一定要和接口中定义的方法一致</span></span><br><span class="line"><span class="comment">*  2.返回值的类型也一定要和接口中的方法一致</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Syntax3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        LambdaSingleReturnSingleParmeter lambda1=a-&gt;a*<span class="number">2</span>;</span><br><span class="line">        LambdaSingleReturnSingleParmeter lambda2=a-&gt;a*<span class="number">2</span>;</span><br><span class="line">        LambdaSingleReturnSingleParmeter lambda3=a-&gt;a*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化</span></span><br><span class="line">        LambdaSingleReturnSingleParmeter lambda4=a-&gt;change(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        LambdaSingleReturnSingleParmeter lambda5=Syntax3::change;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自定义的实现方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-方法引用-构造方法"><a href="#2-方法引用-构造方法" class="headerlink" title="2.方法引用(构造方法)"></a>2.方法引用(构造方法)</h3><p>目前有一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person的无参构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person的有参构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需求</p>
<p>两个接口，各有一个方法，一个接口的方法需要引用Person的无参构造，一个接口的方法需要引用Person的有参构造 用于返回两个Person对象，例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonCreater</span>&#123;</span><br><span class="line">    <span class="comment">//通过Person的无参构造实现</span></span><br><span class="line">    Person <span class="title function_">getPerson</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonCreater2</span>&#123;</span><br><span class="line">    <span class="comment">//通过Person的有参构造实现</span></span><br><span class="line">    Person <span class="title function_">getPerson</span><span class="params">(String name,<span class="type">int</span> age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么可以写作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Syntax4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        PersonCreater creater=()-&gt;<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">//精简为</span></span><br><span class="line">        PersonCreater creater1=Person::<span class="keyword">new</span>; </span><br><span class="line"></span><br><span class="line">        Person a=creater1.getPerson(); <span class="comment">//实际调用的是Person的无参构造</span></span><br><span class="line"></span><br><span class="line">        PersonCreater2 creater2=Person::<span class="keyword">new</span>;</span><br><span class="line">        Person b=creater2.getPerson(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>); <span class="comment">//引用的是Person的有参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：是引用无参构造还是引用有参构造 在于接口定义的方法参数</strong></p>
<h2 id="五、综合练习"><a href="#五、综合练习" class="headerlink" title="五、综合练习"></a>五、综合练习</h2><h3 id="1-集合排序案例"><a href="#1-集合排序案例" class="headerlink" title="1.集合排序案例"></a>1.集合排序案例</h3><p>13586150107 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alan.exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alan.learn.data.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合排序案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exercise1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：已知在一个ArrayList中有若干各Person对象，将这些Person对象按照年龄进行降序排列</span></span><br><span class="line">        ArrayList&lt;Person&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">13</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;赵六&quot;</span>,<span class="number">14</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李雷&quot;</span>,<span class="number">11</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;韩梅梅&quot;</span>,<span class="number">8</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span>+list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将排列的依据传入 具体的方法指向的是 内部元素的age相减 sort会依据结果的正负进行降序排列</span></span><br><span class="line">        <span class="comment">//sort 使用提供的 Comparator对此列表进行排序以比较元素。</span></span><br><span class="line">        list.sort((o1, o2) -&gt; o2.age-o1.age);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-Treeset排序案例"><a href="#2-Treeset排序案例" class="headerlink" title="2.Treeset排序案例"></a>2.Treeset排序案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exercise2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**Treeset 自带排序</span></span><br><span class="line"><span class="comment">         * 但是现在不知道Person谁大谁小无法排序</span></span><br><span class="line"><span class="comment">         * 解决方法：</span></span><br><span class="line"><span class="comment">         * 使用Lambda表达式实现Comparator接口，并实例化一个TreeSet对象</span></span><br><span class="line"><span class="comment">         * 注意：在TreeSet中如果Comparator返回值是 0 会判断这是两个元素是相同的 会进行去重</span></span><br><span class="line"><span class="comment">         * TreeSet&lt;Person&gt; set=new TreeSet&lt;&gt;((o1, o2) -&gt; o2.age-o1.age); </span></span><br><span class="line"><span class="comment">         * 这个获取的对象打印会少一个Person</span></span><br><span class="line"><span class="comment">         * 此时我们将方法修改</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        TreeSet&lt;Person&gt; set=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((o1, o2) -&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(o1.age&gt;=o2.age)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">13</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;赵六&quot;</span>,<span class="number">14</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李雷&quot;</span>,<span class="number">11</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;韩梅梅&quot;</span>,<span class="number">8</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-集合的遍历"><a href="#3-集合的遍历" class="headerlink" title="3.集合的遍历"></a>3.集合的遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alan.exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合的遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exercise3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Collections.addAll(list,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * list.forEach(Consumer&lt;? super E&gt; action) </span></span><br><span class="line"><span class="comment">         * api文档解释： 对 集合中的每个元素执行给定的操作，直到所有元素都被处理或动作引发异常。</span></span><br><span class="line"><span class="comment">         * 将集合中的每一个元素都带入到接口Consumer的方法accept中  然后方法accept指向我们的引用</span></span><br><span class="line"><span class="comment">         * 输出集合中的所有元素</span></span><br><span class="line"><span class="comment">         * list.forEach(System.out::println);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合中所有的偶数</span></span><br><span class="line">        list.forEach(ele-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(ele%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(ele);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-删除集合中满足条件的元素"><a href="#4-删除集合中满足条件的元素" class="headerlink" title="4.删除集合中满足条件的元素"></a>4.删除集合中满足条件的元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alan.exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alan.learn.data.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除集合中满足条件的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exercise4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Person&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">13</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;赵六&quot;</span>,<span class="number">14</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李雷&quot;</span>,<span class="number">11</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;韩梅梅&quot;</span>,<span class="number">8</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合中年龄大于12的元素</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 之前迭代器的做法</span></span><br><span class="line"><span class="comment">         * ListIterator&lt;Person&gt; it = list.listIterator();</span></span><br><span class="line"><span class="comment">         * while (it.hasNext())&#123;</span></span><br><span class="line"><span class="comment">         *   Person ele=it.next();</span></span><br><span class="line"><span class="comment">         *   if(ele.age&gt;12)&#123;</span></span><br><span class="line"><span class="comment">         *         it.remove();</span></span><br><span class="line"><span class="comment">         *   &#125;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * lambda实现</span></span><br><span class="line"><span class="comment">         * 逻辑</span></span><br><span class="line"><span class="comment">         * 将集合中的每一个元素都带入到接口Predicate的test方法中，</span></span><br><span class="line"><span class="comment">         * 如果返回值是true，则删除这个元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        list.removeIf(ele-&gt;ele.age&gt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-开辟一条线程-做一个数字的输出"><a href="#5-开辟一条线程-做一个数字的输出" class="headerlink" title="5.开辟一条线程 做一个数字的输出"></a>5.开辟一条线程 做一个数字的输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alan.exercise;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：</span></span><br><span class="line"><span class="comment"> * 开辟一条线程 做一个数字的输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exercise5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通过Runnable 来实例化线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Thread t=<span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="六、系统内置的函数式接口"><a href="#六、系统内置的函数式接口" class="headerlink" title="六、系统内置的函数式接口"></a>六、系统内置的函数式接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统内置的一些函数式接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionalInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Predicate&lt;T&gt;              ：     参数是T 返回值boolean  </span></span><br><span class="line">        <span class="comment">// 在后续如果一个接口需要指定类型的参数，返回boolean时可以指向 Predicate</span></span><br><span class="line">        <span class="comment">//          IntPredicate            int -&gt; boolean</span></span><br><span class="line">        <span class="comment">//          LongPredicate           long -&gt; boolean</span></span><br><span class="line">        <span class="comment">//          DoublePredicate         double -&gt; boolean</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Consumer&lt;T&gt;               :      参数是T 无返回值(void)</span></span><br><span class="line">        <span class="comment">//          IntConsumer             int -&gt;void</span></span><br><span class="line">        <span class="comment">//          LongConsumer            long -&gt;void</span></span><br><span class="line">        <span class="comment">//          DoubleConsumer          double -&gt;void</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Function&lt;T,R&gt;             :      参数类型T  返回值R</span></span><br><span class="line">        <span class="comment">//          IntFunction&lt;R&gt;          int -&gt; R</span></span><br><span class="line">        <span class="comment">//          LongFunction&lt;R&gt;         long -&gt; R</span></span><br><span class="line">        <span class="comment">//          DoubleFunction&lt;R&gt;       double -&gt; R</span></span><br><span class="line">        <span class="comment">//          IntToLongFunction       int -&gt; long</span></span><br><span class="line">        <span class="comment">//          IntToDoubleFunction     int -&gt; double</span></span><br><span class="line">        <span class="comment">//          LongToIntFunction       long -&gt; int</span></span><br><span class="line">        <span class="comment">//          LongToDoubleFunction    long -&gt; double</span></span><br><span class="line">        <span class="comment">//          DoubleToLongFunction    double -&gt; long</span></span><br><span class="line">        <span class="comment">//          DoubleToIntFunction     double -&gt; int</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Supplier&lt;T&gt; : 参数 无 返回值T</span></span><br><span class="line">        <span class="comment">// UnaryOperator&lt;T&gt; :参数T 返回值 T</span></span><br><span class="line">        <span class="comment">// BiFunction&lt;T,U,R&gt; : 参数 T、U 返回值 R</span></span><br><span class="line">        <span class="comment">// BinaryOperator&lt;T&gt; ：参数 T、T 返回值 T</span></span><br><span class="line">        <span class="comment">// BiPredicate&lt;T,U&gt; :  参数T、U  返回值 boolean</span></span><br><span class="line">        <span class="comment">// BiConsumer&lt;T,U&gt; :    参数T、U 无返回值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 常用的 函数式接口</span></span><br><span class="line"><span class="comment">         * Predicate&lt;T&gt;、Consumer&lt;T&gt;、Function&lt;T,R&gt;、Supplier&lt;T&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="七、Lambda闭包"><a href="#七、Lambda闭包" class="headerlink" title="七、Lambda闭包"></a>七、Lambda闭包</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * lambda的闭包会提升包围变量的生命周期</span></span><br><span class="line"><span class="comment">         * 所以局部变量 num在getNumber()方法内被 get()引用 不会在getNumber()方法执行后销毁</span></span><br><span class="line"><span class="comment">         * 这种方法可以在外部获取到某一个方法的局部变量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> n=getNumber().get();</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Supplier&lt;Integer&gt; <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> num=<span class="number">10</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Supplier supplier=()-&gt;num;</span></span><br><span class="line"><span class="comment">         * return supplier;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">*************************************************************************</span><br><span class="line">    </span><br><span class="line"><span class="keyword">package</span> com.alan.closure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Alan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-27 17:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">        Consumer&lt;Integer&gt; c=ele-&gt;&#123;</span><br><span class="line">            System.out.println(a+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//System.out.println(ele);</span></span><br><span class="line">            <span class="comment">//System.out.println(a++); 会报错</span></span><br><span class="line">            <span class="comment">//在lambda中引用局部变量 这个变量必须是一个常量</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//a++; 这样也会导致内部报错</span></span><br><span class="line">        <span class="comment">//如果在内部已经引用局部变量 参数传递后 打印的还是 10</span></span><br><span class="line">        c.accept(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java 8</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端</title>
    <url>/2022/08/22/Web%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h3><p>​	 Web标准三个构成：</p>
<ul>
<li>结构    HTML    页面元素</li>
<li>表现    CSS        页面美观</li>
<li>行为     JavaScript   交互的动态效果</li>
</ul>
<h3 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2.HTML"></a>2.HTML</h3><p>​	工具：VSCODE</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>br</td>
<td>换行</td>
</tr>
<tr>
<td>hr</td>
<td>水平线</td>
</tr>
<tr>
<td>h1—h6</td>
<td>标题</td>
</tr>
<tr>
<td>p</td>
<td>段落</td>
</tr>
<tr>
<td>&amp;nbsp；</td>
<td>空格</td>
</tr>
</tbody></table>
<h4 id="2-1文本格式化标签"><a href="#2-1文本格式化标签" class="headerlink" title="2.1文本格式化标签"></a>2.1文本格式化标签</h4><table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>b；strong</td>
<td>加粗</td>
</tr>
<tr>
<td>u；ins</td>
<td>下划线</td>
</tr>
<tr>
<td>i；em</td>
<td>倾斜</td>
</tr>
<tr>
<td>s；del</td>
<td>删除线</td>
</tr>
</tbody></table>
<span id="more"></span>
<h4 id="2-2媒体标签"><a href="#2-2媒体标签" class="headerlink" title="2.2媒体标签"></a>2.2媒体标签</h4><ul>
<li><p>图片标签</p>
<p><code>&lt;img src=&quot;图片路径&quot; alt=&quot;图片替换文本&quot; title=&quot;鼠标悬停提示文本&quot; width=&quot;宽&quot; height=&quot;高&quot;&gt;</code></p>
</li>
<li><p>音频标签</p>
<p><code>&lt;audio src=&quot;&quot; controls(显示控件) autoplay(自动播放) loop(循环播放)&gt;&lt;/audio&gt;</code></p>
</li>
<li><p>视频标签</p>
<p><code>&lt;video src=&quot;&quot; controls autoplay muted(静音) loop&gt;&lt;/video&gt;</code></p>
</li>
<li><p>链接标签</p>
<p><code>&lt;a href=&quot;跳转地址&quot; target=&quot;_blank&quot;(在新窗口跳转)&gt;&lt;/a&gt;</code> </p>
<p>href&#x3D;“#” 表示空链接</p>
</li>
</ul>
<h4 id="2-3列表标签："><a href="#2-3列表标签：" class="headerlink" title="2.3列表标签："></a>2.3列表标签：</h4><p>有序、无序、自定义</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>张三:100分<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>李四:80分<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>王五:60分<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--ul、ol标签只能放li标签--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>帮助中心<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>账户管理<span class="tag">&lt;/<span class="name">dd</span>&gt;</span><span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>购物指南<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4表格标签"><a href="#2-4表格标签" class="headerlink" title="2.4表格标签"></a>2.4表格标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span> <span class="comment">&lt;!--border边框宽度--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生成绩单<span class="tag">&lt;/<span class="name">caption</span>&gt;</span><span class="comment">&lt;!--表头--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span> <span class="comment">&lt;!--thead tbody tfoot解构--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="comment">&lt;!--th表头--&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">th</span>&gt;</span>评语<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">     		<span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--rowspan跨行合并colspan跨列合并--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">td</span>&gt;</span>总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">td</span>&gt;</span>真棒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">td</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   	 	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5表单标签"><a href="#2-5表单标签" class="headerlink" title="2.5表单标签"></a>2.5表单标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">文本框:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--placeholder提示信息--&gt;</span></span><br><span class="line"></span><br><span class="line">密码框:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">单选框:</span><br><span class="line">性别:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女</span><br><span class="line"><span class="comment">&lt;!--name分组做单选 checked默认选中--&gt;</span></span><br><span class="line"></span><br><span class="line">多选框:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--同单选框--&gt;</span></span><br><span class="line"></span><br><span class="line">上传文件:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--multiple多文件--&gt;</span></span><br><span class="line"></span><br><span class="line">按钮:</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span>同<span class="tag">&lt;<span class="name">input</span>&gt;</span>按钮</span><br><span class="line"><span class="comment">&lt;!--如果要生效需要套上&lt;form&gt;&lt;/form&gt;标签--&gt;</span></span><br><span class="line"></span><br><span class="line">下拉菜单:</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--selected默认选中--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">文本域:</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">单选框点击文字也能选中</span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3.CSS"></a>3.CSS</h3><p>思路：浮动&#x2F;display——盒子模型——文字样式</p>
<h4 id="3-1css基础"><a href="#3-1css基础" class="headerlink" title="3.1css基础"></a>3.1css基础</h4><h5 id="3-1-1引入方式"><a href="#3-1-1引入方式" class="headerlink" title="3.1.1引入方式"></a>3.1.1引入方式</h5><p>内嵌式、外联式、行内式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--内嵌式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*选择器&#123;css属性&#125;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--外联式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./my.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--行内式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:green; font-size:30px&quot;</span>&gt;</span>这是div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-1-2选择器类型"><a href="#3-1-2选择器类型" class="headerlink" title="3.1.2选择器类型"></a>3.1.2选择器类型</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 标签选择器 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 类选择器 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.size</span>&#123;<span class="attribute">font-size</span>: <span class="number">66px</span>;&#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* id选择器(一般搭配js使用) */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#blue</span>&#123;<span class="attribute">color</span>:skyblue;&#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 通配符标签(用的少) */</span></span></span><br><span class="line"><span class="language-css">        *&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试标签选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>测试类选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;red size&quot;</span>&gt;</span>测试使用多个类选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>测试div调用类选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>测试id选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-1-3css样式"><a href="#3-1-3css样式" class="headerlink" title="3.1.3css样式"></a>3.1.3css样式</h5><p>借助浏览器的调试工具</p>
<ul>
<li><p>字体font</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    	<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*大小*/</span> 	   <span class="attribute">font-size</span>:<span class="number">30px</span>;		<span class="comment">/*默认16*/</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/*粗细*/</span>     <span class="attribute">font-weight</span>:<span class="number">700</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*倾斜*/</span>     <span class="attribute">font-style</span>:italic; <span class="comment">/*normal不倾斜*/</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/*字体*/</span>	   <span class="attribute">font-family</span>:微软雅黑,黑体,sans-serif;<span class="comment">/*按顺序优先显示，任意非衬线字体*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/*复合属性*/</span> <span class="comment">/*font:style weight size family; 只能省略前两个*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>:italic <span class="number">700</span> <span class="number">66px</span> 宋体;</span></span><br><span class="line"><span class="language-css">    	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>文本text</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*文本缩进*/</span>  text-indend:<span class="number">2em</span>;		         <span class="comment">/*缩进2字号*/</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/*内容居中*/</span>  <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*文本修饰*/</span>  <span class="attribute">text-decoration</span>:underline      <span class="comment">/*下划线*/</span>    </span></span><br><span class="line"><span class="language-css">			 text-decoration:line-through   <span class="comment">/*删除线*/</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">    		 <span class="attribute">text-decoration</span>:none           <span class="comment">/*无装饰线一般用于超链接*/</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*标签居中*/</span>     <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是没有下划线的超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>背景</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css">-</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        	<span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);	<span class="comment">/*背景色*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">图片的路径</span>);	<span class="comment">/*背景图*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>:no-repeat;		<span class="comment">/*不平铺*/</span></span></span><br><span class="line"><span class="language-css">        	<span class="attribute">background-position</span>:center;        <span class="comment">/*水平垂直都居中*/</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"> 		   <span class="comment">/*background:color image repeat position*/</span><span class="comment">/*复合属性*/</span></span></span><br><span class="line"><span class="language-css">        	<span class="attribute">background</span>:pink <span class="built_in">url</span>(<span class="string">./img/1.jpg</span>) no-repeat center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>去掉列表的符号</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ul&#123;</span><br><span class="line">	list-style:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>行高line</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>:<span class="number">50px</span>;  <span class="comment">/*两种写法*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>:<span class="number">1.5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font</span>:italic <span class="number">700</span> <span class="number">66px</span>/<span class="number">2</span> 宋体;  <span class="comment">/*可以在font复合写*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-2css进阶"><a href="#3-2css进阶" class="headerlink" title="3.2css进阶"></a>3.2css进阶</h4><h5 id="3-2-1多选择器"><a href="#3-2-1多选择器" class="headerlink" title="3.2.1多选择器"></a>3.2.1多选择器</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red;&#125;<span class="comment">/*后代选择器*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red&#125;<span class="comment">/*子选择器*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>,<span class="selector-tag">div</span>,<span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:red&#125;<span class="comment">/*并列选择器*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.box</span><span class="comment">/*交集选择器*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-2hover伪类选择器"><a href="#3-2-2hover伪类选择器" class="headerlink" title="3.2.2hover伪类选择器"></a>3.2.2hover伪类选择器</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*悬停变色*/</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-3元素显示模式"><a href="#3-2-3元素显示模式" class="headerlink" title="3.2.3元素显示模式"></a>3.2.3元素显示模式</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;&gt;</span></span><br><span class="line">嵌套</span><br><span class="line">p标签不要嵌套div、p、h等块级元素</span><br><span class="line">a标签内部可以嵌套任意元素，但不能嵌套本身</span><br></pre></td></tr></table></figure>

<h5 id="3-2-4css特性"><a href="#3-2-4css特性" class="headerlink" title="3.2.4css特性"></a>3.2.4css特性</h5><ul>
<li><p>继承性、层叠性、优先级</p>
<ul>
<li><p>继承性：控制文字的属性都能继承，不是控制文字的就不能继承，优先级比较低。</p>
</li>
<li><p>层叠性：下覆盖上</p>
</li>
<li><p>优先级：谁的范围广谁优先级高</p>
<p>继承&lt;通配符&lt;标签&lt;类&lt;id&lt;行内&lt;!important</p>
<p>复合选择器中计算权重：（行内样式个数，id选择器，类，标签）</p>
</li>
</ul>
</li>
<li><p>PxCook像素大厨：量尺寸和取颜色</p>
</li>
</ul>
<h4 id="3-3盒子模型"><a href="#3-3盒子模型" class="headerlink" title="3.3盒子模型"></a>3.3盒子模型</h4><ul>
<li><p>盒子组成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;<span class="comment">/*边框线*/</span><span class="comment">/*solid实线dashed虚线dotted点线*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>:<span class="number">20px</span>;		  <span class="comment">/*内边距*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*padding和border都会撑大盒子*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>:<span class="number">50px</span>;		  <span class="comment">/*外边距*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left</span>:<span class="number">1px</span> solid <span class="number">#000</span>;<span class="comment">/*边框方位*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span> <span class="number">40px</span> <span class="number">80px</span>;<span class="comment">/*上以顺时针*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>:<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>版心居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>清除标签默认的内间距，且不撑大</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>:border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>思路：从内到外，先宽高背景，放内容，调节内容位置，控制文字细节</p>
</li>
<li><p>塌陷问题</p>
</li>
</ul>
<p>​		overflow:hidden;</p>
<h4 id="3-4css浮动"><a href="#3-4css浮动" class="headerlink" title="3.4css浮动"></a>3.4css浮动</h4><ul>
<li><p>结构伪类选择器</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="language-css">	<span class="comment">/*选中第一个*/</span>	</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="language-css">	<span class="comment">/*选中最后一个*/</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n)&#123;</span></span><br><span class="line"><span class="language-css">	<span class="comment">/*选中第n个*/</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">n可以放公式：n=0,1,2,3...</span><br><span class="line">    偶数:2n</span><br><span class="line">	奇数:2n+1</span><br><span class="line">	4的倍数:4n</span><br></pre></td></tr></table></figure>
</li>
<li><p>伪元素：通过css创建标签，非主体内容可以使用伪元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.father</span>&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.father</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.father</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>标准流：标签的默认的排列规则</p>
</li>
<li><p>浮动：会脱离标准流的控制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span><span class="selector-pseudo">:left</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>清除浮动的影响：在父元素内容的最后添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--额外标签法--&gt;</span></span><br><span class="line">    .clearfix&#123;clear:both;&#125;</span><br><span class="line"><span class="comment">&lt;!--单伪元素清除法--&gt;</span></span><br><span class="line">.clearfix::after&#123;</span><br><span class="line">	content:&#x27;&#x27;;</span><br><span class="line">	display:block;</span><br><span class="line">	clear:both;</span><br><span class="line">	height:0;</span><br><span class="line">	visbility:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--双伪元素清除法，可以解决浮动和外边距塌陷问题--&gt;</span></span><br><span class="line">.clearfix::before,</span><br><span class="line">.clearfix::after&#123;</span><br><span class="line">	content:&#x27;&#x27;;</span><br><span class="line">	display table;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix::after&#123;</span><br><span class="line">	clear:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--直接给父级中加--&gt;</span></span><br><span class="line">&#123;overflow:hidden;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2022/07/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="终止进程失效的情况"><a href="#终止进程失效的情况" class="headerlink" title="终止进程失效的情况"></a>终止进程失效的情况</h3><p>cmd杀死进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ taskkill /F /IM node.exe</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java面试</title>
    <url>/2022/08/22/java%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h3 id="1-Java面向对象有哪些特征？"><a href="#1-Java面向对象有哪些特征？" class="headerlink" title="1. Java面向对象有哪些特征？"></a>1. Java面向对象有哪些特征？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：继承、封装、多态。增加代码的复用性、可移植性、灵活性。</span><br><span class="line"></span><br><span class="line">继承：将重复使用的属性和方法提取放在一个父类中，子类通过继承获得父类的属性和方法。目的在于提升复用性。</span><br><span class="line"></span><br><span class="line">封装：把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口，使用private和public修饰。目的在于保护数据信息。</span><br><span class="line"></span><br><span class="line">多态：类和类的关系，条件是继承、重写、父类引用指向子类对象。</span><br></pre></td></tr></table></figure>
<span id="more"></span>


<h3 id="2-ArrayList和LinkedList的区别？"><a href="#2-ArrayList和LinkedList的区别？" class="headerlink" title="2. ArrayList和LinkedList的区别？"></a>2. ArrayList和LinkedList的区别？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayList是基于数组，LinkedList是链表实现的。</span><br><span class="line"></span><br><span class="line">数据访问上，ArrayList速度快于LinkedList。ArrayList通过下标可以直接找到，LinkedList需要借助指针进行遍历。</span><br><span class="line"></span><br><span class="line">新增和删除数据上，LinkedList速度快于ArrayList。ArrayList可能需要扩容和移动大量数据，LinkedList只需修改指针。</span><br><span class="line"></span><br><span class="line">LinkedList不能随机访问，因为需要从第一个节点开始遍历。</span><br></pre></td></tr></table></figure>



<h3 id="3-高并发中的集合有哪些问题？"><a href="#3-高并发中的集合有哪些问题？" class="headerlink" title="3.高并发中的集合有哪些问题？"></a>3.高并发中的集合有哪些问题？</h3><p><strong>进程</strong>是资源分配的基本单位，<strong>线程</strong>是执行调度的基本单位。</p>
<p>并发：操作系统的线程调度器（OS）来负责进行线程切换。</p>
<p>超线程：线程撕裂者，ALU对应多个寄存器组，在核内部做切换。</p>
<p><strong>线程的三大特性</strong>：可见性、有序性、原子性。</p>
<ul>
<li><p>可见性：</p>
<p>关键字volatile：<code>volatile boolean running = true;</code>&#x2F;&#x2F;只要变量被改动，就通知所有缓存更新。</p>
<p>缓存一致性协议：保证多级缓存的内容一致。MESI是Intel的缓存一致性协议。volatile与MESI没有关系，volatile是java触发的，MESI由底层汇编触发。</p>
<p>缓存行：缓存读取时是按块读取，缓存行大小64字节。缓存行过大，命中率高但是速度慢，缓存行过小速度快但是命中率低，64字节大小为工业测试最佳大小。若long类型的变量前后定义7个long（占56个字节），可以保证永远不会出现在同一个缓存行中，提高了效率</p>
</li>
<li><p>有序性： </p>
<p>cpu是乱序执行的</p>
</li>
</ul>
<h3 id="4-java-8的新特性"><a href="#4-java-8的新特性" class="headerlink" title="4.java 8的新特性"></a>4.java 8的新特性</h3><p>lambda表达式，其实就是一个匿名的函数，用于简化只有一个抽象方法的接口的实现。@FunctionalInterface</p>
<h3 id="5-谈谈对List-Map的认识"><a href="#5-谈谈对List-Map的认识" class="headerlink" title="5.谈谈对List Map的认识"></a>5.谈谈对List Map的认识</h3><h3 id="6-sql优化"><a href="#6-sql优化" class="headerlink" title="6.sql优化"></a>6.sql优化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.基础写法的优化：</span><br><span class="line">	少使用select *，尽量使用具体字段</span><br><span class="line">	对于条件来说，两边的字段要一致，字符串要加单引号</span><br><span class="line">	少使用order by排序，对于需要多个字段进行排序的可以使用组合索引</span><br><span class="line">	对于group by语句要先过滤再分组</span><br><span class="line">	在查询时，少使用null，对字段有多个null的可以加默认值</span><br><span class="line">	少使用like，如需要使用尽量用abc%，不要把%放前面</span><br><span class="line">	where 后面少使用函数或者算数运算，因为可能会破坏索引</span><br><span class="line">	去重distinct少用，避免distinct*</span><br><span class="line">	多表连接不要超过5个以上</span><br><span class="line">2.适当建立索引</span><br><span class="line">	对于高频筛选字段可以适当的建立索引</span><br><span class="line">	索引不要过多，多了会影响插入和修改</span><br><span class="line">	不要对值是有限重复的字段建立索引，如性别</span><br><span class="line">	使用组合索引一定要遵守最左原则</span><br><span class="line">3.替代优化</span><br><span class="line">	不要使用not in 和&lt;&gt;,这个会破坏索引，not in 可以用not exists 来代替，&lt;&gt;可以分成两个条件 &gt;或者&lt;等；</span><br><span class="line">    使用连接（join）来代替子查询；</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="7-Mybatis工作流程和缓存机制"><a href="#7-Mybatis工作流程和缓存机制" class="headerlink" title="7.Mybatis工作流程和缓存机制"></a>7.Mybatis工作流程和缓存机制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">工作流程</span><br><span class="line">1、读取MyBatis的核心配置文件mybatis-config.xml。</span><br><span class="line">2、加载映射文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">缓存机制原理：将第一次从数据库 SQL 查询的结果数据保存到缓存（内存中），当下一次 SQL 查询和第一次相同，如果缓存中有数据则直接获取，而不用再从数据库获取，从而减少数据库访问频率，大大提升数据库性能。</span><br><span class="line"></span><br><span class="line">一级缓存：sqlsession级别的缓存</span><br><span class="line">	第一次执行完毕会将数据库中查询的数据写到缓存，在该 SqlSession 对象中再次执行相同的 SQL 语句，就从缓存中获取数据。MyBatis 默认开启一级缓存，并且无法关闭。条件：同一个 SqlSession 对象、相同的 SQL 语句和参数</span><br><span class="line">二级缓存： Mapper 级别的缓存</span><br><span class="line">	是多个 SqlSesion 对象共用的，作用范围是mapper的同一个namespace，不同的 SqlSession 对象再次执行相同 namepace 下的 SQL 语句，第一次执行会将数据库中查询结果数据存储到二级缓存中，第二次会从二级缓存中获取数据。</span><br><span class="line">	</span><br><span class="line">区别：一级缓存和二级缓存的区别</span><br><span class="line">二级缓存是 Mapper 级别，一级缓存是 SqlSession 级别，多个 SqlSession 级别的一级缓存可以共享一个 Mapper 级别的二级缓存。</span><br><span class="line">当开启二级缓存后，数据的查询执行的流程是二级缓存 -&gt; 一级缓存 -&gt; 数据库</span><br></pre></td></tr></table></figure>

<h3 id="8-spring"><a href="#8-spring" class="headerlink" title="8.spring"></a>8.spring</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">谈谈对spring的认识？</span><br><span class="line">	Spring是一个轻量级Java开发框架，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题，最根本的是简化Java开发。在开发中，Spring负责基础架构，开发者可以专注于应用程序的开发。</span><br><span class="line">	两大核心：IOC控制反转和AOP面向切面编程。</span><br><span class="line">	</span><br><span class="line">什么是IOC？</span><br><span class="line">	对象的调用权交给容器，通过容器来实现对象组件的装配和管理。将类的创建和依赖关系写在配置文件里，由配置文件注入，实现了松耦合。</span><br><span class="line">什么是AOP？</span><br><span class="line">	是面向切面编程的一种思想，一种动态的抽象，基于代理模式下进行的。就是将安全，事务等于程序逻辑相对独立的功能抽取出来，利用spring的配置文件将这些功能插进去，</span><br><span class="line"></span><br><span class="line">Spring是如何简化开发的？</span><br><span class="line">	基于pojo的轻量级和最小侵入性编程</span><br><span class="line">	通过依赖注入和面向接口实现松耦合</span><br><span class="line">	基于切面（AOP）和惯例进行声明式编程</span><br><span class="line">	通过切面和模板减少样式代码</span><br></pre></td></tr></table></figure>

<h3 id="9-springmvc的工作流程"><a href="#9-springmvc的工作流程" class="headerlink" title="9.springmvc的工作流程"></a>9.springmvc的工作流程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2022/08/20/mysql/</url>
    <content><![CDATA[<h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><h3 id="1-数据库相关概念"><a href="#1-数据库相关概念" class="headerlink" title="1.数据库相关概念"></a>1.数据库相关概念</h3><p>数据库的好处：可以持久化数据到本地；结构化查询</p>
<p>DB：数据库，存储数据的容器</p>
<p>DBMS ：数据库管理系统，又称为数据库软件或数据库产品，用于创建或管理DB</p>
<p>SQL：结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有的，而是几乎所有主流数据库软件通用的语言。</p>
<p>常见的数据库管理系统：mysql、oracle、db2、sql server</p>
<span id="more"></span>

<h3 id="2-MySQL介绍"><a href="#2-MySQL介绍" class="headerlink" title="2.MySQL介绍"></a>2.MySQL介绍</h3><p>优点：开源、免费、成本低；性能高、移植性好；体积小便于安装</p>
<p>安装：属于c&#x2F;s架构的软件，一般安装服务端</p>
<p>启动和停止：命令<code>net start 服务名</code> <code>net stop 服务名</code> 或 计算机管理服务</p>
<p>登录和退出：命令<code>mysql 【-h 主机名 -p 端口号】 -u用户名 -p密码</code>  <code>exit</code>或ctrl+c</p>
<h2 id="二、DQL语言"><a href="#二、DQL语言" class="headerlink" title="二、DQL语言"></a>二、DQL语言</h2><h3 id="1-常见命令"><a href="#1-常见命令" class="headerlink" title="1.常见命令"></a>1.常见命令</h3><p>使用库 ：<code>use test;</code></p>
<p>显示表结构：<code>desc student;</code></p>
<h3 id="2-基础查询"><a href="#2-基础查询" class="headerlink" title="2.基础查询"></a>2.基础查询</h3><ul>
<li><p><strong>查询字段信息</strong></p>
<p><code>select id,name from student;</code></p>
<p>可以在字段上加上&#96;&#96;号，用于区分内置关键字</p>
</li>
<li><p><strong>查询常量值</strong></p>
<p><code>select 100;</code></p>
<p><code>select &#39;john&#39;;</code></p>
</li>
<li><p><strong>查询表达式</strong></p>
<p><code>select 100%98;</code></p>
</li>
<li><p><strong>查询函数</strong></p>
<p><code>select version();</code></p>
</li>
</ul>
<h4 id="2-1-起别名"><a href="#2-1-起别名" class="headerlink" title="2.1.起别名"></a>2.1.起别名</h4><p><code>select sname as 姓名,sex as 性别 from student;</code></p>
<p><code>select sname 姓名,sex 性别 from student;</code> 可以省略as</p>
<p>如果别名中与内置名冲突，就用双引号包裹</p>
<h4 id="2-2-去重"><a href="#2-2-去重" class="headerlink" title="2.2.去重"></a>2.2.去重</h4><p>在字段前加<u>distinc</u>t关键字</p>
<p><code>select distinct stu_age from student;</code></p>
<h4 id="2-3-合并字段"><a href="#2-3-合并字段" class="headerlink" title="2.3.合并字段"></a>2.3.合并字段</h4><p>+号：mysql中的+号就是运算，字符串被转换为0进行运算，null加任何结果为null</p>
<p>**concat()**：字符串的拼接</p>
<p><code>select concat(last_name,first_name) as 姓名 from student;</code></p>
<p>如果有字段为null，需要使用ifnul()来设置默认值</p>
<p><code>select concat(last_name,ifnull(first_name,0)) as 姓名 from student;</code></p>
<h3 id="3-条件查询【where】"><a href="#3-条件查询【where】" class="headerlink" title="3.条件查询【where】"></a>3.条件查询【where】</h3><p><code>select 字段 from 表名 where 筛选条件;</code></p>
<h4 id="3-1运算符"><a href="#3-1运算符" class="headerlink" title="3.1运算符"></a>3.1运算符</h4><p><strong>3.1.1条件运算符</strong></p>
<p>​		&gt;、&lt; 、&#x3D; 、&lt;&gt;、&gt;&#x3D;、&lt;&#x3D;</p>
<p>例：查询工资大于12000的员工信息</p>
<p>​		<code>select * from employees where salary&gt;12000;</code></p>
<p><strong>3.1.2逻辑运算符</strong></p>
<p>​		and、or、not</p>
<p>例：工资不在90-100，或奖金大于100的员工信息</p>
<p>​		<code>select * from employees where salary&lt;90 or salary&gt;110 or commission &gt; 100;</code> </p>
<h4 id="3-2模糊查询"><a href="#3-2模糊查询" class="headerlink" title="3.2模糊查询"></a>3.2模糊查询</h4><p>​	   like、between and、in、is null</p>
<ul>
<li><p><strong>like</strong></p>
<p>字符需要用’’引起来，%为任意位的通配符，_为单个字符通配符</p>
<p>如果需要模糊查询带_的，需要进行转义，可以使用escape ‘$’</p>
<p>例：查询名字中包含a的员工信息</p>
<p><code>select * from employees where lastname like &#39;%a%&#39;;</code></p>
</li>
<li><p><strong>betwen and</strong>   等价于&gt;&#x3D;  &lt;&#x3D;</p>
</li>
<li><p><strong>in</strong> 类似在{}集合里</p>
<p>例：查询专业为计科、信管、网安的学生信息</p>
<p><code>select * from student where stu_zy in (&#39;计科&#39;,&#39;信管&#39;,&#39;网安&#39;);</code></p>
</li>
<li><p><strong>is null</strong> 查询空值，不能用&#x3D; null，必须用is null</p>
<p>例：查询没有成绩的学生信息</p>
<p><code>select * from student where grade is null; </code></p>
<p>安全等于&lt;&#x3D;&gt;：兼容判断普通值和null值。不常用因为可读性较差。</p>
</li>
</ul>
<h3 id="4-排序查询-【order-by】"><a href="#4-排序查询-【order-by】" class="headerlink" title="4.排序查询 【order by】"></a>4.排序查询 【order by】</h3><p><code>select 字段 from 表名 order by 字段 asc(默认可不写)/desc;</code></p>
<p>例：按年薪的排序显示员工的信息和年薪</p>
<p><code>select *,salary*12 年薪 from employees order by salary*12;</code>   按表达式排序</p>
<p><code>select *,salary*12 年薪 from employees order by 年薪;</code>   按别名排序</p>
<p>例：按姓名长度进行倒序排序，显示姓名和工资</p>
<p><code>select name,salary from employees order by length(name) desc;</code>  按函数排序</p>
<p>例：查询员信息，要求先按工资升序，再按员工编号降序</p>
<p><code>select * from employees order by salary asc,id desc;</code> 多字段排序</p>
<p>查询顺序：from 表 ——&gt; where ——&gt; select ——&gt; order by</p>
<h3 id="5-常见函数"><a href="#5-常见函数" class="headerlink" title="5.常见函数"></a>5.常见函数</h3><p> 单行函数：做数据处理，如concat、length、ifnull等</p>
<p> 分组函数：做统计使用，又称为统计函数、聚合函数、组函数</p>
<h4 id="5-1单行函数："><a href="#5-1单行函数：" class="headerlink" title="5.1单行函数："></a>5.1单行函数：</h4><p>​	做数据处理，如concat、length、ifnull等</p>
<h5 id="5-1-1字符函数："><a href="#5-1-1字符函数：" class="headerlink" title="5.1.1字符函数："></a>5.1.1字符函数：</h5><ul>
<li><p>length 获取参数的字节个数</p>
</li>
<li><p>concat 字符串拼接</p>
</li>
<li><p>upper、lower：大小写转换</p>
</li>
</ul>
<p>例：将姓变大写，名变小写，然后拼接</p>
<p><code>select concat(upper(last_name),lower(first_name)) 姓名 from employees;</code></p>
<ul>
<li><p>substr、substring 字符串截取，索引从1开始</p>
<p>substr(‘123456’,5)      结果为56</p>
<p>substr(‘123456’,2,3)   结果为234    3为字符长度不是字节长度</p>
</li>
<li><p>instr 子串在字符串中的起始索引</p>
<p>substr(‘123456’,23)  结果为2</p>
</li>
<li><p>trim 去掉字符串前后的字符，默认为去空格 </p>
<p>trim(‘  123   ‘)   结果为123</p>
<p>trim(‘a’ from ‘aaa123aaa456aaa’) 结果为 123aaa456</p>
</li>
<li><p>lpad&#x2F;rpad 补齐字符串填充</p>
<p>lpad(‘fsq’,6,’1’)  结果为111fsq</p>
</li>
<li><p>repalce 替换</p>
<p>replace(‘fsq123fsq’,’123’,’fsq’) 结果为fsqfsqfsq</p>
</li>
</ul>
<h5 id="5-1-2数学函数"><a href="#5-1-2数学函数" class="headerlink" title="5.1.2数学函数"></a>5.1.2数学函数</h5><ul>
<li><p><strong>round</strong> 四舍五入</p>
<p>round(1.567,2)  保留小数点后两位</p>
</li>
<li><p><strong>ceil</strong> 向上取整，返回大于等于该参数的最小整数</p>
<p>ceil(1.02)  结果为2</p>
</li>
<li><p><strong>floor</strong> 向下取整，同ceil</p>
</li>
<li><p><strong>truncate</strong> 截断</p>
<p>truncate(1.6777,1)  结果为1.6</p>
</li>
<li><p><strong>mod</strong> 取余数</p>
</li>
<li><p>rand 随机数</p>
</li>
</ul>
<h5 id="5-1-3日期函数"><a href="#5-1-3日期函数" class="headerlink" title="5.1.3日期函数"></a>5.1.3日期函数</h5><ul>
<li><p>now 返回当前系统的日期+时间</p>
</li>
<li><p>curdate 返回系统的日期</p>
</li>
<li><p>curtime 返回当前时间</p>
</li>
<li><p>year(now())  取年  </p>
</li>
<li><p>month() 取月 monthname() 月的英文</p>
</li>
<li><p>str_to_date()：字符转日期，需要格式控制</p>
<p>例：str_to_date(‘2000-06-21’,’%y-%c-%d’)   结果为00-6-21</p>
<p>%Y 四位年份      %y两位年份</p>
<p>%m 月份（01月）    %c 月份（1月）</p>
<p>%d 日</p>
<p>%H 时（24小时制） %h时（12小时制）</p>
<p>%i 分钟</p>
<p>%s秒</p>
</li>
<li><p>date_format：日期转字符</p>
</li>
<li><p>datediff(‘日期1’,’日期2’)  日期相隔时间</p>
</li>
</ul>
<h5 id="5-1-4其他函数"><a href="#5-1-4其他函数" class="headerlink" title="5.1.4其他函数"></a>5.1.4其他函数</h5><ul>
<li><p>version 查看版本号</p>
</li>
<li><p>database 当前数据库</p>
</li>
<li><p>user 当前用户</p>
</li>
<li><p>password 返回该字符的密码形式，加密成密文</p>
</li>
<li><p>md5() md5加密</p>
</li>
<li><p>exists() 判断是否有查询结果</p>
</li>
</ul>
<h5 id="5-1-5流程控制函数"><a href="#5-1-5流程控制函数" class="headerlink" title="5.1.5流程控制函数"></a>5.1.5流程控制函数</h5><ul>
<li><p>if </p>
<p>if(10&gt;5,’大’,’小’) </p>
</li>
<li><p>case  ：类似switch case  适合做等值判断</p>
<p>【case 要判断的字段或表达式  when 常量1 then 要显示值或语句 …  else 要显示值或语句 end】</p>
<p><em>例</em>：查询员工的工资，要求部门号&#x3D;30，显示工资1.1倍，部门号&#x3D;40，显示工资1.2倍，部门号&#x3D;40，显示工资1.3倍，其他为原始工资</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select departmanet_id,salary 原始工资,</span><br><span class="line">	case department_id </span><br><span class="line">	when 30 then salary*1.1</span><br><span class="line">	when 40 then salary*1.2</span><br><span class="line">	when 50 then salary*1.3</span><br><span class="line">	else salary</span><br><span class="line">	end as 新工资 from employees;</span><br></pre></td></tr></table></figure>
</li>
<li><p>case 第二种使用  类似多重if  适合区间判断</p>
<p>【case when 条件1 then 要显示的值或语句1 when… else 要显示的值或语句 end】</p>
<p><em>例</em>：查询员工的工资情况，如果工资&gt;20000,显示A级别；如果工资&gt;15000，显示B级别；如果工资&gt;10000,显示C级别；否则，显示级别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select salary,</span><br><span class="line">case </span><br><span class="line">	 when salary&gt;20000 then &#x27;A&#x27;</span><br><span class="line">     when salary&gt;15000 then &#x27;B&#x27;</span><br><span class="line">     when salary&gt;10000 then &#x27;C&#x27;</span><br><span class="line">     else &#x27;D&#x27;</span><br><span class="line">     end as 工资级别</span><br><span class="line">from employees;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-2分组函数"><a href="#5-2分组函数" class="headerlink" title="5.2分组函数"></a>5.2分组函数</h4><p>​	做统计使用，又称为统计函数、聚合函数、组函数</p>
<p>​    注意：null值被忽略，不参与计算；要求结果为规则表格</p>
<p>​    可以和distinct搭配使用 select  sum(distinct 字段)from 表</p>
<ul>
<li><p>sum 求和         数值型</p>
</li>
<li><p>avg 平均值       数值型</p>
</li>
<li><p>max 最大值    min最小值      数值、字符、日期</p>
</li>
<li><p>count 统计非空个数   都支持</p>
<p>一般使用count(*)来统计行数，就是一行只要有一个字段没有null值就被统计在内，也可以使用count(1)</p>
</li>
</ul>
<h3 id="6-分组查询-【group-by】【having】"><a href="#6-分组查询-【group-by】【having】" class="headerlink" title="6.分组查询 【group by】【having】"></a>6.分组查询 【group by】【having】</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 分组函数,列（要求出现在group by后面）</span><br><span class="line">from 表</span><br><span class="line">【where 筛选条件】</span><br><span class="line">group by 分组的列表</span><br><span class="line">【having 分组后的筛选】</span><br><span class="line">【order by 排序列表 asc/desc】</span><br></pre></td></tr></table></figure>

<p>having 关键字用于分组后的筛选，数据源为分组后的结果集，分组函数做条件肯定放在having子句中</p>
<ul>
<li>按字段分组</li>
</ul>
<p>例：查询每个工种的最高工资</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select max(salary),job_id</span><br><span class="line">from employees</span><br><span class="line">group by job_id;</span><br></pre></td></tr></table></figure>

<p>例：查询员工个数&gt;2的部门 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),department_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having count count(*) &gt; 2;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>按表达式或函数分组</p>
<p>例：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数&gt;5的有哪些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),langth(last_name)</span><br><span class="line">from employees</span><br><span class="line">group by langth(last_name)</span><br><span class="line">having count(*) &gt; 2</span><br></pre></td></tr></table></figure>
</li>
<li><p>按多个字段分组</p>
<p>例：查询每个部门每个工种的员工的平均工资</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select avg(salary),department_id,job_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加排序</p>
<p>例：查询每个部门每个工种的员工的平均工资，按工资从高到底显示</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary),department_id,job_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id,job_id;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">avg</span>(salary) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-连接查询"><a href="#7-连接查询" class="headerlink" title="7.连接查询"></a>7.连接查询</h3><p>笛卡尔积，表1 m行，表2 n行，结果有m*n行</p>
<h4 id="7-1sql92版本"><a href="#7-1sql92版本" class="headerlink" title="7.1sql92版本"></a>7.1sql92版本</h4><p>​	sql92只有内连接：等值连接、非等值连接、自连接</p>
<ul>
<li><p><strong>等值连接</strong></p>
<p>需要为表起别名，起了别名后select后的字段不可用用原表名</p>
<p>例：查询员工名、工种号、工种名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> last_name,e.job_id,job_title</span><br><span class="line"><span class="keyword">from</span> employees e,jobs j</span><br><span class="line"><span class="keyword">where</span> e.job_id <span class="operator">=</span> j.job_id;</span><br></pre></td></tr></table></figure>

<p>三表连接：where e.id &#x3D; j.id and j.id&#x3D; l.id</p>
</li>
<li><p><strong>非等值连接</strong></p>
<p>例：查询员工的工资和工资级别</p>
<p>员工表：salary       工资级别表：grade_level, lowest_sal , highest_sal</p>
<p>查询员工的工资和工资级别</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employees_id,salary,grade_level</span><br><span class="line"><span class="keyword">from</span> employees e,job_grades</span><br><span class="line"><span class="keyword">where</span> salary <span class="keyword">between</span> lowest_sal <span class="keyword">and</span> highest_sal;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自连接</strong></p>
<p>本表的两个字段相连接，其实就是查两次表，借助别名对本表进行区分</p>
<p>例：查询员工名和上级领导的名字，员工和领导在一个表里</p>
<p>员工表：employee_id ,  lastname , manager_id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select m.lastname,n.lastname</span><br><span class="line">from employees m,employees n</span><br><span class="line">where m.manager_id = n.employee_id</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-2sql99版本"><a href="#7-2sql99版本" class="headerlink" title="7.2sql99版本"></a>7.2sql99版本</h4><p>​	sql99分为内连接、外连接、交叉连接</p>
<p>   其实就是将连接条件从where中分离出来，使用关键字on</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表1 别名</span><br><span class="line">连接类型(默认为inner) join 表2 别名</span><br><span class="line">on 连接条件</span><br><span class="line">【where 筛选条件】</span><br><span class="line">【group by 分组的列表】</span><br><span class="line">【having 分组后的筛选】</span><br><span class="line">【order by 排序列表 asc/desc】</span><br></pre></td></tr></table></figure>

<h5 id="7-2-1内连接"><a href="#7-2-1内连接" class="headerlink" title="7.2.1内连接"></a>7.2.1<strong>内连接</strong></h5><p>​	连接类型 为 <strong>inner</strong>，内连接同92版本，只是语法不同</p>
<p>​	例：查询员工名、部门名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> last_name,department_name</span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line">(<span class="keyword">inner</span>) <span class="keyword">join</span> department d</span><br><span class="line"><span class="keyword">on</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure>

<p>多表连接：继续inner join 表3 on 连接条件</p>
<h5 id="7-2-2外连接"><a href="#7-2-2外连接" class="headerlink" title="7.2.2外连接"></a>7.2.2<strong>外连接</strong></h5><p>​	连接类型为 <strong>left outer &#x2F; right outer</strong></p>
<p>​	应用：用于查询一个表中有，另一个表中没有的记录</p>
<p>​	特点：外连接的查询结果 &#x3D; 内连接 + 主表中有但从表没有的null填充</p>
<p>​	分类：左外连接和右外连接，用于切换主从表</p>
<p>例：查询那个部门没有员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> department_name</span><br><span class="line"><span class="keyword">from</span> department d</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> employees e</span><br><span class="line"><span class="keyword">on</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">where</span> e.employee_id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h5 id="7-2-3全外连接"><a href="#7-2-3全外连接" class="headerlink" title="7.2.3全外连接"></a>7.2.3全外连接</h5><p>​	连接类型为<strong>full</strong></p>
<p>​	内连接+左外连接+右外连接</p>
<h5 id="7-2-4交叉连接"><a href="#7-2-4交叉连接" class="headerlink" title="7.2.4交叉连接"></a>7.2.4交叉连接</h5><p>​	连接类型为<strong>cross</strong></p>
<p>​	其实就是笛卡尔乘积</p>
<p><img src="/mysql.assets/image-20220819153038304.png" alt="image-20220819153038304"></p>
<h3 id="8-子查询"><a href="#8-子查询" class="headerlink" title="8.子查询"></a>8.子查询</h3><p>​	出现在其他语句中的select语句，称为子查询或内查询</p>
<img src="mysql.assets/image-20220819155001375.png" alt="image-20220819155001375" style="zoom:50%;float:left" />

<h4 id="8-1标量子查询-单行子查询"><a href="#8-1标量子查询-单行子查询" class="headerlink" title="8.1标量子查询(单行子查询)"></a>8.1标量子查询(单行子查询)</h4><p>​	搭配单行操作符使用，&gt;、&lt;、 &gt;&#x3D;、&lt;&#x3D;、&#x3D;、&lt;&gt; </p>
<p>例：查询工资比Abel高的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="keyword">select</span> salary </span><br><span class="line">    <span class="keyword">from</span> employees </span><br><span class="line">    <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>例：查询最低工资大于<u>50号部门的最低工资</u>的部门id和其最低工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> department_id,<span class="built_in">min</span>(salary)</span><br><span class="line"><span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">min</span>(salary) <span class="operator">&gt;</span> (</span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">min</span>(salary)</span><br><span class="line">    <span class="keyword">from</span> employee</span><br><span class="line">    <span class="keyword">where</span> department_id  <span class="operator">=</span> <span class="number">50</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h4 id="8-2列子查询-多行子查询"><a href="#8-2列子查询-多行子查询" class="headerlink" title="8.2列子查询(多行子查询)"></a>8.2列子查询(多行子查询)</h4><p>​	搭配多行操作符使用，in、any&#x2F;some、all</p>
<p>例：查询location_id是1400或1700的部门编号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> lastname</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="keyword">in</span> (</span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">distinct</span> department_id</span><br><span class="line">	<span class="keyword">from</span> departments</span><br><span class="line">	<span class="keyword">where</span> location_id <span class="keyword">in</span> (<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>例：查询其他部门中比<u>job-id为’IT-PROG’ 部门任一工资低</u>的员工的员工号、姓名、job_id以及salary</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,lastname,job_id,salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&lt;</span> (</span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">max</span>(salary)</span><br><span class="line">	<span class="keyword">from</span> employees</span><br><span class="line">	<span class="keyword">where</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">and</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="8-2行子查询-多列查询"><a href="#8-2行子查询-多列查询" class="headerlink" title="8.2行子查询(多列查询)"></a>8.2行子查询(多列查询)</h4><p>例：查询员工编号最小并且工资最高的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#常规写法</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> employee_id <span class="operator">=</span> (</span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">min</span>(employee_id)</span><br><span class="line">	<span class="keyword">from</span> employees</span><br><span class="line">)</span><br><span class="line"><span class="keyword">and</span> salary <span class="operator">=</span> (</span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">max</span>(salary)</span><br><span class="line">    <span class="keyword">from</span> employee</span><br><span class="line">);</span><br><span class="line">#行子查询写法</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> (employee_id,salary) <span class="operator">=</span> (</span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">min</span>(employee_id),<span class="built_in">max</span>(salary)</span><br><span class="line">	<span class="keyword">from</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h3 id="9-分页查询【limit】"><a href="#9-分页查询【limit】" class="headerlink" title="9.分页查询【limit】"></a>9.分页查询【limit】</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表1 别名</span><br><span class="line">【连接类型(默认为inner) join 表2 别名</span><br><span class="line">on 连接条件】</span><br><span class="line">【where 筛选条件】</span><br><span class="line">【group by 分组的列表】</span><br><span class="line">【having 分组后的筛选】</span><br><span class="line">【order by 排序列表 asc/desc】</span><br><span class="line">limit offset(可不加),size;</span><br></pre></td></tr></table></figure>

<p>offset 显示条目的起始索引，起始索引从0开始，可不加默认从0开始</p>
<p>size 要显示的条目个数</p>
<p>例：查询前5条员工的信息 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line">limit <span class="number">5</span>; #或写成limit <span class="number">0</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>例：查询第11-25员工的信息 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line">limit <span class="number">10</span>,<span class="number">15</span>;</span><br></pre></td></tr></table></figure>

<h3 id="10-联合查询【union】"><a href="#10-联合查询【union】" class="headerlink" title="10.联合查询【union】"></a>10.联合查询【union】</h3><p>合并：将多条语句的结果合并成一个结果</p>
<p>应用场景：需要从多个表中各自查询合并成一个表</p>
<p>注意：查询的列数需要保持一致；union结果自动去重，union all结果不去重</p>
<p>例：查询中国的男性用户和外国的男性用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,cname,csex <span class="keyword">from</span> t_ca <span class="keyword">where</span> csex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> t_id,tName,tGender <span class="keyword">from</span> u_ca <span class="keyword">where</span> usex<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">#查询结果的字段名为id,cname,csex</span><br></pre></td></tr></table></figure>



<h2 id="三、DML语言（数据管理）"><a href="#三、DML语言（数据管理）" class="headerlink" title="三、DML语言（数据管理）"></a>三、DML语言（数据管理）</h2><h3 id="1-插入insert"><a href="#1-插入insert" class="headerlink" title="1.插入insert"></a>1.插入insert</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式一:</span><br><span class="line">insert into 表名(列名,...) values(值1,...);</span><br><span class="line"></span><br><span class="line">方式二:</span><br><span class="line">insert into 表名 set 列名1=值1,列名2=值2,...;</span><br></pre></td></tr></table></figure>

<p>注意：插入值的类型与列的类型一致或兼容，字符型日期型的要用’’连接，字段和值的个数要一致</p>
<ul>
<li><p>方式一支持批量插入，方式二不支持</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名(列名,...) values(1,...),</span><br><span class="line">values(2,...),</span><br><span class="line">values(3,...);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式一支持子查询，方式二不支持</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表1(列名,...)</span><br><span class="line">select (列名) from 表2;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-更新update"><a href="#2-更新update" class="headerlink" title="2.更新update"></a>2.更新update</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#更新单表</span><br><span class="line">update 表名 set 字段1=值1,字段2=值2,... where 查询条件;</span><br><span class="line"></span><br><span class="line">#更新多表</span><br><span class="line">update 表1 连接类型 join 表2 on 连接条件 </span><br><span class="line">set 字段1=值1,字段2=值2,... where 查询条件;</span><br></pre></td></tr></table></figure>

<h3 id="3-删除delete-x2F-truncate"><a href="#3-删除delete-x2F-truncate" class="headerlink" title="3.删除delete&#x2F;truncate"></a>3.删除delete&#x2F;truncate</h3><p><strong>3.1使用delete</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除单表</span><br><span class="line">  delete from 表名 where 筛选条件 【limit 条目数】;</span><br><span class="line">  </span><br><span class="line">#级联删除</span><br><span class="line">  delete 别名1,别名2 from 表1 别名1 连接类型 join 表2 别名2 on 连接条件 where 筛选条件;</span><br></pre></td></tr></table></figure>

<p><strong>3.2使用truncate</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate table 表名;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>delete和truncate两者区别</p>
<p>1.truncate删除后，如果再插入，标识列从1开始；delete标识列从断点开始</p>
<p>2.delete可以添加筛选条件，truncate不行</p>
<p>3.truncate效率较高</p>
<p>4.truncate没有返回值，delete可以返回受影响的行数</p>
<p>5.truncate不可以回滚，delete可以</p>
</li>
</ul>
<h2 id="四、DDL语言"><a href="#四、DDL语言" class="headerlink" title="四、DDL语言"></a>四、DDL语言</h2><h3 id="1-库的管理"><a href="#1-库的管理" class="headerlink" title="1.库的管理"></a>1.库的管理</h3><p><strong>1.1创建库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 【if not exists】 库名 【character set 字符集】;</span><br></pre></td></tr></table></figure>

<p><strong>1.2.修改库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database 库名 character set 字符集名;</span><br></pre></td></tr></table></figure>

<p><strong>1.3.删除库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database 【if exists】 库名;</span><br></pre></td></tr></table></figure>



<h3 id="2-表的管理"><a href="#2-表的管理" class="headerlink" title="2.表的管理"></a>2.表的管理</h3><p><strong>2.1创建表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 【if not exists】 表名(</span><br><span class="line">	字段1 字段类型 【约束】,</span><br><span class="line">	字段2 字段类型 【约束】,</span><br><span class="line">	...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>2.2修改表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加列</span><br><span class="line">alter table 表名 add column 列名 类型 【first|after 字段名】;</span><br><span class="line"></span><br><span class="line">#修改列类型或约束</span><br><span class="line">alter table 表名 modify column 列名 新类型 【新约束】;</span><br><span class="line"></span><br><span class="line">#修改列名</span><br><span class="line">alter table 表名 change column 列名 新列名;</span><br><span class="line"></span><br><span class="line">#删除某列</span><br><span class="line">alter table 表名 drop column 列名;</span><br><span class="line"></span><br><span class="line">#修改表名</span><br><span class="line">alter table 表名 rename 新表名;</span><br></pre></td></tr></table></figure>

<p><strong>2.3删除表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table 【if exsits】 表名;</span><br></pre></td></tr></table></figure>

<p><strong>2.4复制表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#复制表的结构</span><br><span class="line">create table 表名 like 旧表;</span><br><span class="line"></span><br><span class="line">#复制表的结构+数据</span><br><span class="line">create table 表名 from 旧表 【where 筛选条件】;</span><br></pre></td></tr></table></figure>



<h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h3><p><strong>3.1数值型</strong></p>
<ul>
<li><p>整形：tinyint、smallint、medimint、int&#x2F;integer、bigint</p>
<p>特点：1.可以设置无符号和有符号，默认有符号，通过unsigned设置无符号</p>
<p>​			2.如果超过范围，会报out or range异常，插入临界值</p>
<p>​	        3.长度可以不指定，默认会有一个长度，默认是最大宽度，如果不够左边用0填充，但需要搭配zerofill，并且默认变为无符号整形</p>
</li>
<li><p>浮点型：定点数：decimal(M,D)    浮点数：float(M,D) 、double(M,D)</p>
<p>特点：1.M代表整数补位+小数部位的个数，D代表小数位数</p>
<p>​			2.如果超出范围，则报out or range异常，并且插入临界值</p>
<p>​			3.M和D都可以省略，但对于定点数，M默认为10，D默认为0</p>
<p>​			4.如果精度要求较高，则优先考虑使用定点数</p>
</li>
</ul>
<p><strong>3.2字符型</strong></p>
<p>char、vachar、binary、varbinary、enum、set、text、blob</p>
<p>char：固定长度的字符，写法为char(M)，最大长度不能超过M，M可以省略，默认为1</p>
<p>varchar：可变长度的字符，写法为varchar(M)，最大长度不能超过M，M不可以省略</p>
<p><strong>3.3日期型</strong></p>
<p>year年、date日期、time时间、datetime日期时间</p>
<h3 id="4-常见约束"><a href="#4-常见约束" class="headerlink" title="4.常见约束"></a>4.常见约束</h3><h2 id="五、面试题"><a href="#五、面试题" class="headerlink" title="五、面试题"></a>五、面试题</h2><ul>
<li><p><code>select * from employees;</code>和<code>select * from employees where id like &#39;%%&#39; and name like &#39;%%&#39;;</code>两者一样吗？</p>
<p>答：不一样，如果name和id字段没有null值就一样，但是可能存在null值。</p>
</li>
<li><p>分组查询，分组前筛选和分组后筛选的区别?</p>
<p>答：</p>
<p>分组前：关键字—where   筛选的表—原始表    位置—group by 前面</p>
<p>分组后：关键字—having   筛选的表—分组后的结果    位置—group by 后面</p>
</li>
<li><p>delete和truncate的区别</p>
<p>答：</p>
<p>1.truncate删除后，如果再插入，标识列从1开始；delete标识列从断点开始</p>
<p>2.delete可以添加筛选条件，truncate不行</p>
<p>3.truncate效率较高</p>
<p>4.truncate没有返回值，delete可以返回受影响的行数</p>
<p>5.truncate不可以回滚，delete可以</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构算法</title>
    <url>/2022/07/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><ul>
<li><p>数据结构分类</p>
<ul>
<li><p>线性结构：数组、队列、链表、栈                                         </p>
<p>两种存储方式：顺序存储、线性存储</p>
</li>
<li><p>非线性结构：二维数组，广义表、树结构、图结构</p>
</li>
</ul>
</li>
<li><p>算法</p>
<p>目标：速度、占用内存</p>
</li>
<li><p>程序 &#x3D; 数据结构 + 算法</p>
</li>
</ul>
<span id="more"></span>

<h1 id="二、稀疏数组"><a href="#二、稀疏数组" class="headerlink" title="二、稀疏数组"></a>二、稀疏数组</h1><p>就是对二维数组的压缩，第一行记录行列数和值总数，下面记录有意义的值的行列位置和值</p>
<p> <img src="C:/Users/FANG/AppData/Roaming/Typora/typora-user-images/image-20220713003447466.png"></p>
<blockquote>
<p>转换思路：<br>   二维数组 转 稀疏数组<br>1.遍历原始二维数组，得到有效数据的个数sum<br>2.创建稀疏数组sparseArr&#x3D;int[sum+1][3]<br>3.将有效数组的有效数据存入到sparseArr</p>
<p>稀疏数组 转 二维数组<br>1.读取稀疏数组第一行，根据第一行创建原始二维数组chessArr2&#x3D;int[6][7]<br>2.读取稀疏数组后面的数据，赋给二维数组</p>
</blockquote>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原始数组</span></span><br><span class="line">        <span class="type">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>][<span class="number">7</span>];</span><br><span class="line">        chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] row : chessArr1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> data : row)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>,data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原始二维数组 转换 稀疏数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line">        <span class="type">int</span> sparseArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArr1[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">        sparseArr1[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">7</span>;</span><br><span class="line">        sparseArr1[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    sparseArr1[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArr1[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArr1[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;sparseArr1.length; i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t%d\t%d\t\n&quot;</span>,sparseArr1[i][<span class="number">0</span>],sparseArr1[i][<span class="number">1</span>],sparseArr1[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//稀疏数组 转换 原始数组</span></span><br><span class="line">        <span class="type">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArr1[<span class="number">0</span>][<span class="number">0</span>]][sparseArr1[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//        sparseArr1[0][0]=0;</span></span><br><span class="line"><span class="comment">//        sparseArr1[0][1]=0;</span></span><br><span class="line"><span class="comment">//        sparseArr1[0][2]=0;</span></span><br><span class="line"><span class="comment">//        for(int[] row : sparseArr1)&#123;</span></span><br><span class="line"><span class="comment">//            chessArr2[row[0]][row[1]] = row[2];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>; i &lt; sparseArr1.length; i++)&#123;</span><br><span class="line">            chessArr2[sparseArr1[i][<span class="number">0</span>]][sparseArr1[i][<span class="number">1</span>]] = sparseArr1[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;恢复的原始数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] row : chessArr2)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> data : row)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>,data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="三、队列"><a href="#三、队列" class="headerlink" title="三、队列"></a>三、队列</h1><p>先入先出原则</p>
<h2 id="3-1-数组模拟队列"><a href="#3-1-数组模拟队列" class="headerlink" title="3.1.数组模拟队列"></a>3.1.数组模拟队列</h2><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220714141500049.png" alt="image-20220714141500049" style="zoom: 80%; float: left" />

<p>思路：</p>
<ul>
<li>队列满  rear &#x3D;&#x3D; maxSize - 1</li>
<li>队列空 front &#x3D;&#x3D; rear</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队列，添加数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;队列满，不能加入&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rear++;</span><br><span class="line">    arr[rear] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队列，获取数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">        <span class="comment">//抛出异常处理</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，没有数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    front++;</span><br><span class="line">    <span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-数组模拟环形队列"><a href="#3-2-数组模拟环形队列" class="headerlink" title="3.2.数组模拟环形队列"></a>3.2.数组模拟环形队列</h2><p> 思路：</p>
<ul>
<li><p>front变量：front指向队列的第一个元素，也就是arr[front]就是队列的第一个元素，front初始值&#x3D;0</p>
</li>
<li><p>rear变量：rear指向队列的最后一个元素的后一个位置，空出一个空间作为约定，rear初始值&#x3D;0</p>
</li>
<li><p>当队列满时，条件是（rear+1）%maxSize &#x3D;&#x3D; front</p>
</li>
<li><p>当队列为空时，条件是 rear&#x3D;&#x3D;front</p>
</li>
<li><p>队列有效数据的个数为（rear+maxSize-front）%maxSize</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队列，添加数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;队列满，不能加入&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[rear] = n;</span><br><span class="line">    rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队列，获取数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">        <span class="comment">//抛出异常处理</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，没有数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[front];</span><br><span class="line">    front = (front + <span class="number">1</span>)  % maxSize;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列所有数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;队列空，没有数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front; i &lt; front + size(); i++) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i % maxSize ,arr[i % maxSize]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、链表"><a href="#四、链表" class="headerlink" title="四、链表"></a>四、链表</h1><p>链表是以节点的方式存储，每个节点包含data域和next域（指向下一个节点），链表的各个节点不一定是连续存放的，链表分带头节点和不带头节点## 4.1.单链表</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220714164004527.png" alt="image-20220714164004527" style="zoom:80%;float:left" />

<p> 在链表末尾插入 思路：</p>
<ul>
<li>先创建一个head头节点，作用就是表示单链表的头</li>
<li>后面每添加一个节点，直接加到链表的最后</li>
<li>遍历：通过辅助遍历</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加节点到单向列表</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode heroNode)</span>&#123;</span><br><span class="line">      <span class="comment">//找到最后节点，将这个节点的next指向新增节点</span></span><br><span class="line">      <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">      <span class="comment">//遍历链表找到最后节点</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">          <span class="comment">//找到链表最后</span></span><br><span class="line">          <span class="keyword">if</span>(temp.next == <span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//如果没找到最后，将temp后移</span></span><br><span class="line">          temp = temp.next;</span><br><span class="line">      &#125;</span><br><span class="line">      temp.next = heroNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//显示链表【遍历】</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(temp == <span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(temp);</span><br><span class="line">          temp = temp.next;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>按顺序插入单链表思路：</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715001644348.png" alt="image-20220715001644348" style="zoom:80%;float:left" />

<ul>
<li>找到新节点插入位置的上一个节点赋给辅助变量temp，找位置通过遍历来搞定</li>
<li>新节点.next &#x3D; temp.next</li>
<li>将temp.next &#x3D; 新的节点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrder</span><span class="params">(HeroNode heroNode)</span>&#123;</span><br><span class="line">        <span class="comment">//头节点不能动，借助辅助指针找添加的位置</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//标志添加的编号是否存在，默认为false</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.next.no &gt; heroNode.no)&#123; <span class="comment">//位置找到，就在temp后面插</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;<span class="comment">//编号存在</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;该编号%d已存在，不能加入\n&quot;</span>,heroNode.no);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//准备插入</span></span><br><span class="line">            heroNode.next = temp.next;</span><br><span class="line">            temp.next = heroNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-双向链表"><a href="#4-2-双向链表" class="headerlink" title="4.2.双向链表"></a>4.2.双向链表</h2><p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715214418710.png" alt="image-20220715214418710" style="zoom:80%;" />## 4.3.环形链表（单向环形链表 ）</p>
<p>约瑟夫问题</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715214752500.png" alt="image-20220715214752500" style="zoom:80%;" />

<p>构建环形链表</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715215540523.png" alt="image-20220715215540523" style="zoom:80%;" />

<p>出队列</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220715222257252.png" alt="image-20220715222257252" style="zoom:80%;" />



<h3 id="五、栈（stack）"><a href="#五、栈（stack）" class="headerlink" title="五、栈（stack）"></a>五、栈（stack）</h3><p>出栈pop，入栈push</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716111858662.png" alt="image-20220716111858662" style="zoom:80%;" />

<h5 id="5-1-数组模拟栈"><a href="#5-1-数组模拟栈" class="headerlink" title="5.1.数组模拟栈"></a>5.1.数组模拟栈</h5><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716112400723.png" alt="image-20220716112400723" style="zoom:80%;" />

<p>例子：计算一个表达式</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716144608467.png" alt="image-20220716144608467" style="zoom:80%;" />





<h2 id="5-2-链表模拟栈"><a href="#5-2-链表模拟栈" class="headerlink" title="5.2.链表模拟栈"></a>5.2.链表模拟栈</h2><p>课后练习</p>
<h2 id="5-3-前中后缀表达式"><a href="#5-3-前中后缀表达式" class="headerlink" title="5.3.前中后缀表达式"></a>5.3.前中后缀表达式</h2><ul>
<li>前缀表达式</li>
</ul>
<p>又称波兰表达式，表达式的运算符位于操作数之前</p>
<p>举例：（3+4）* 5 -6    对应  - * + 3 4 5 6</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716212142774.png" alt="image-20220716212142774" style="zoom:80%;" />

<ul>
<li>中缀表达式</li>
</ul>
<p>（3+4）* 5 - 6</p>
<ul>
<li>后缀表达式，适合计算机处理</li>
</ul>
<p>逆波兰表达式， 运算符在操作数之后</p>
<p>如:4 * 5 - 8 + 60 + 8 &#x2F; 2   &#x3D;&gt;  4 5 * 8 - 60 + 8 2 &#x2F; + </p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716212159100.png" alt="image-20220716212159100" style="zoom:80%;" />

<ul>
<li>中缀如何转后缀</li>
</ul>
<p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220716221831638.png" alt="image-20220716221831638"></p>
<h1 id="六、递归"><a href="#六、递归" class="headerlink" title="六、递归"></a>六、递归</h1><ul>
<li>递归机制</li>
</ul>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719215930404.png" alt="image-20220719215930404" style="zoom:80%;" />

<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719220735440.png" alt="image-20220719220735440" style="zoom:80%;" />

<p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719221443140.png" alt="image-20220719221443140"></p>
<ul>
<li>迷宫问题</li>
</ul>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719230211249.png" alt="image-20220719230211249" style="zoom:50%;float:left" />

<ul>
<li>八皇后问题</li>
</ul>
<p>思路：</p>
<img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220719231213594.png" alt="image-20220719231213594" style="zoom:80%;" />



<h1 id="七、排序算法"><a href="#七、排序算法" class="headerlink" title="七、排序算法"></a>七、排序算法</h1><p>​     </p>
 <img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220720112052905.png" alt="image-20220720112052905" style="zoom:80%;" />



<h2 id="7-1-冒泡排序"><a href="#7-1-冒泡排序" class="headerlink" title="7.1.冒泡排序"></a>7.1.冒泡排序</h2><p>依次比较相邻两个，比较大小进行交换，先确定最后一个位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> -i; j++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-2选择排序"><a href="#7-2选择排序" class="headerlink" title="7.2选择排序"></a>7.2选择排序</h2><p>确定第1位：找出最小值，和第一位交换；确定第1位，后面找最小放第2位；依次类推。</p>
<p>代码思路：找到本轮最小的下标与第一位交换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span> ; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">            minIndex = j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            minIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i];</span><br><span class="line">    arr[i] = arr[minIndex];</span><br><span class="line">    arr[minIndex] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-插入排序法"><a href="#7-3-插入排序法" class="headerlink" title="7.3.插入排序法"></a>7.3.插入排序法</h2><p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220720204028178.png" alt="image-20220720204028178"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;</span><br><span class="line">        arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">        insertIndex--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-4-希尔排序法"><a href="#7-4-希尔排序法" class="headerlink" title="7.4.希尔排序法"></a>7.4.希尔排序法</h2><p>希尔排序法是对插入法的优化</p>
<p>简单插入排序可能存在，当待插入是最小时，需要移动很多次，影响效率</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//希尔交换式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (gap != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - gap; j &gt;= <span class="number">0</span>; j -= gap) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arr[j] &gt; arr[j + gap]) &#123;</span><br><span class="line">                        temp = arr[j];</span><br><span class="line">                        arr[j] = arr[j + gap];</span><br><span class="line">                        arr[j + gap] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        gap = gap / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//希尔移位式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort2</span><span class="params">(<span class="type">int</span> [] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (gap != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j - gap])&#123;</span><br><span class="line">                        arr[j] = arr[j - gap];</span><br><span class="line">                        j -=  gap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        gap = gap / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-5-快速排序"><a href="#7-5-快速排序" class="headerlink" title="7.5.快速排序"></a>7.5.快速排序</h2><p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220721170339884.png" alt="image-20220721170339884"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;<span class="comment">//左下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> right;<span class="comment">//左下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[(left + right) / <span class="number">2</span>];<span class="comment">//中轴</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[l] &lt; pivot)&#123;</span><br><span class="line">                l += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (arr [r] &gt; pivot)&#123;</span><br><span class="line">                r -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l &gt;= r)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = arr[l];</span><br><span class="line">            arr[l] = arr[r];</span><br><span class="line">            arr[r] = temp;</span><br><span class="line">            <span class="comment">//需要让pivot和剩下的数比</span></span><br><span class="line">            <span class="keyword">if</span>(arr[l] == pivot)&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[r] == pivot)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            l += <span class="number">1</span>;</span><br><span class="line">            r -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; r)&#123;</span><br><span class="line">            quickSort(arr,left,r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; l)&#123;</span><br><span class="line">            quickSort(arr,l,right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-6归并排序"><a href="#7-6归并排序" class="headerlink" title="7.6归并排序"></a>7.6归并排序</h2><p><img src="C:\Users\FANG\AppData\Roaming\Typora\typora-user-images\image-20220725140949110.png" alt="image-20220725140949110"></p>
<h2 id="7-7归并排序"><a href="#7-7归并排序" class="headerlink" title="7.7归并排序"></a>7.7归并排序</h2><h1 id="八、查找算法"><a href="#八、查找算法" class="headerlink" title="八、查找算法"></a>八、查找算法</h1><h2 id="8-1-顺序（线性查找）"><a href="#8-1-顺序（线性查找）" class="headerlink" title="8.1.顺序（线性查找）"></a>8.1.顺序（线性查找）</h2><p>逐一查找</p>
<h2 id="8-2-二分查找"><a href="#8-2-二分查找" class="headerlink" title="8.2.二分查找"></a>8.2.二分查找</h2><h2 id="8-3-插值查找"><a href="#8-3-插值查找" class="headerlink" title="8.3.插值查找"></a>8.3.插值查找</h2><h2 id="8-4-线性查找"><a href="#8-4-线性查找" class="headerlink" title="8.4.线性查找"></a>8.4.线性查找</h2>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
